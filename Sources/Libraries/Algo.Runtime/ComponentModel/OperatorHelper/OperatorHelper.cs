// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

// ReSharper disable RedundantCast
// ReSharper disable RedundantToStringCall
// ReSharper disable CompareOfFloatsByEqualityOperator
// ReSharper disable SpecifyACultureInStringConversionExplicitly
#pragma warning disable CS0675 // Bitwise-or operator used on a sign-extended operand
namespace Algo.Runtime.ComponentModel.OperatorHelper
{
    /// <summary>
    /// Provide some extension methods for an <see cref="object"/>
    /// </summary>
    internal static class OperatorHelper
    {
        #region Methods

        #region Addition

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a int</returns>
		public static int Addition(int a, int b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a long</returns>
		public static long Addition(long a, long b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a short</returns>
		public static short Addition(short a, short b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a uint</returns>
		public static uint Addition(uint a, uint b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ulong with a ulong</returns>
		public static ulong Addition(ulong a, ulong b)
		{
			return (ulong) (a + (ulong)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a ushort</returns>
		public static ushort Addition(ushort a, ushort b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a double</returns>
		public static double Addition(double a, double b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a float</returns>
		public static float Addition(float a, float b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a decimal</returns>
		public static decimal Addition(decimal a, decimal b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a string</returns>
		public static string Addition(string a, string b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a char with a char</returns>
		public static char Addition(char a, char b)
		{
			return (char) (a + (char)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a System.TimeSpan with a System.TimeSpan</returns>
		public static System.TimeSpan Addition(System.TimeSpan a, System.TimeSpan b)
		{
			return (System.TimeSpan) (a + (System.TimeSpan)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a byte</returns>
		public static byte Addition(byte a, byte b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a sbyte</returns>
		public static sbyte Addition(sbyte a, sbyte b)
		{
			return (sbyte) (a + (sbyte)b);
		}


        #endregion

        #region Subtraction

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a int</returns>
		public static int Subtraction(int a, int b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a long</returns>
		public static long Subtraction(long a, long b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a short</returns>
		public static short Subtraction(short a, short b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a uint</returns>
		public static uint Subtraction(uint a, uint b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ulong with a ulong</returns>
		public static ulong Subtraction(ulong a, ulong b)
		{
			return (ulong) (a - (ulong)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a ushort</returns>
		public static ushort Subtraction(ushort a, ushort b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a double</returns>
		public static double Subtraction(double a, double b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a float</returns>
		public static float Subtraction(float a, float b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a decimal</returns>
		public static decimal Subtraction(decimal a, decimal b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a char with a char</returns>
		public static char Subtraction(char a, char b)
		{
			return (char) (a - (char)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a System.TimeSpan with a System.TimeSpan</returns>
		public static System.TimeSpan Subtraction(System.TimeSpan a, System.TimeSpan b)
		{
			return (System.TimeSpan) (a - (System.TimeSpan)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a byte with a byte</returns>
		public static byte Subtraction(byte a, byte b)
		{
			return (byte) (a - (byte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a sbyte</returns>
		public static sbyte Subtraction(sbyte a, sbyte b)
		{
			return (sbyte) (a - (sbyte)b);
		}


        #endregion

        #region Multiply

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a int</returns>
		public static int Multiply(int a, int b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a long</returns>
		public static long Multiply(long a, long b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a short</returns>
		public static short Multiply(short a, short b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a uint</returns>
		public static uint Multiply(uint a, uint b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ulong with a ulong</returns>
		public static ulong Multiply(ulong a, ulong b)
		{
			return (ulong) (a * (ulong)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a ushort</returns>
		public static ushort Multiply(ushort a, ushort b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a double</returns>
		public static double Multiply(double a, double b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a float</returns>
		public static float Multiply(float a, float b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a decimal</returns>
		public static decimal Multiply(decimal a, decimal b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a char with a char</returns>
		public static char Multiply(char a, char b)
		{
			return (char) (a * (char)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a byte</returns>
		public static byte Multiply(byte a, byte b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a sbyte</returns>
		public static sbyte Multiply(sbyte a, sbyte b)
		{
			return (sbyte) (a * (sbyte)b);
		}


        #endregion

        #region Division

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a int</returns>
		public static int Division(int a, int b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a long</returns>
		public static long Division(long a, long b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a short</returns>
		public static short Division(short a, short b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a uint</returns>
		public static uint Division(uint a, uint b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ulong with a ulong</returns>
		public static ulong Division(ulong a, ulong b)
		{
			return (ulong) (a / (ulong)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a ushort</returns>
		public static ushort Division(ushort a, ushort b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a double</returns>
		public static double Division(double a, double b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a float</returns>
		public static float Division(float a, float b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a decimal</returns>
		public static decimal Division(decimal a, decimal b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a char with a char</returns>
		public static char Division(char a, char b)
		{
			return (char) (a / (char)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a byte</returns>
		public static byte Division(byte a, byte b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a sbyte</returns>
		public static sbyte Division(sbyte a, sbyte b)
		{
			return (sbyte) (a / (sbyte)b);
		}


        #endregion

        #region Modulus

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a int</returns>
		public static int Modulus(int a, int b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a long</returns>
		public static long Modulus(long a, long b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a short</returns>
		public static short Modulus(short a, short b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a uint</returns>
		public static uint Modulus(uint a, uint b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ulong with a ulong</returns>
		public static ulong Modulus(ulong a, ulong b)
		{
			return (ulong) (a % (ulong)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a ushort</returns>
		public static ushort Modulus(ushort a, ushort b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a double</returns>
		public static double Modulus(double a, double b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a float</returns>
		public static float Modulus(float a, float b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a decimal</returns>
		public static decimal Modulus(decimal a, decimal b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a char with a char</returns>
		public static char Modulus(char a, char b)
		{
			return (char) (a % (char)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a byte</returns>
		public static byte Modulus(byte a, byte b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a sbyte</returns>
		public static sbyte Modulus(sbyte a, sbyte b)
		{
			return (sbyte) (a % (sbyte)b);
		}


        #endregion

        #region BitwiseOr

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a bool with a bool</returns>
		public static bool BitwiseOr(bool a, bool b)
		{
			return (bool) (a | (bool)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a int with a int</returns>
		public static int BitwiseOr(int a, int b)
		{
			return (int) (a | (int)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a long with a long</returns>
		public static long BitwiseOr(long a, long b)
		{
			return (long) (a | (long)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a short with a short</returns>
		public static short BitwiseOr(short a, short b)
		{
			return (short) (a | (short)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a uint with a uint</returns>
		public static uint BitwiseOr(uint a, uint b)
		{
			return (uint) (a | (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a ulong with a ulong</returns>
		public static ulong BitwiseOr(ulong a, ulong b)
		{
			return (ulong) (a | (ulong)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a ushort with a ushort</returns>
		public static ushort BitwiseOr(ushort a, ushort b)
		{
			return (ushort) (a | (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a char with a char</returns>
		public static char BitwiseOr(char a, char b)
		{
			return (char) (a | (char)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a byte with a byte</returns>
		public static byte BitwiseOr(byte a, byte b)
		{
			return (byte) (a | (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a sbyte with a sbyte</returns>
		public static sbyte BitwiseOr(sbyte a, sbyte b)
		{
			return (sbyte) (a | (sbyte)b);
		}


        #endregion

        #region BitwiseAnd

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a bool with a bool</returns>
		public static bool BitwiseAnd(bool a, bool b)
		{
			return (bool) (a & (bool)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a int with a int</returns>
		public static int BitwiseAnd(int a, int b)
		{
			return (int) (a & (int)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a long with a long</returns>
		public static long BitwiseAnd(long a, long b)
		{
			return (long) (a & (long)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a short with a short</returns>
		public static short BitwiseAnd(short a, short b)
		{
			return (short) (a & (short)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a uint with a uint</returns>
		public static uint BitwiseAnd(uint a, uint b)
		{
			return (uint) (a & (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a ulong with a ulong</returns>
		public static ulong BitwiseAnd(ulong a, ulong b)
		{
			return (ulong) (a & (ulong)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a ushort with a ushort</returns>
		public static ushort BitwiseAnd(ushort a, ushort b)
		{
			return (ushort) (a & (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a char with a char</returns>
		public static char BitwiseAnd(char a, char b)
		{
			return (char) (a & (char)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a byte with a byte</returns>
		public static byte BitwiseAnd(byte a, byte b)
		{
			return (byte) (a & (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a sbyte with a sbyte</returns>
		public static sbyte BitwiseAnd(sbyte a, sbyte b)
		{
			return (sbyte) (a & (sbyte)b);
		}


        #endregion

        #region LogicalOr

		/// <summary>
        /// Perform an LogicalOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LogicalOr of a bool with a bool</returns>
		public static bool LogicalOr(bool a, bool b)
		{
			return (bool) (a || (bool)b);
		}


        #endregion

        #region LogicalAnd

		/// <summary>
        /// Perform an LogicalAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LogicalAnd of a bool with a bool</returns>
		public static bool LogicalAnd(bool a, bool b)
		{
			return (bool) (a && (bool)b);
		}


        #endregion

        #region LessThan

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a int</returns>
		public static bool LessThan(int a, int b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a long</returns>
		public static bool LessThan(long a, long b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a short</returns>
		public static bool LessThan(short a, short b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a uint</returns>
		public static bool LessThan(uint a, uint b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ulong with a ulong</returns>
		public static bool LessThan(ulong a, ulong b)
		{
			return (bool) (a < (ulong)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a ushort</returns>
		public static bool LessThan(ushort a, ushort b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a double</returns>
		public static bool LessThan(double a, double b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a float</returns>
		public static bool LessThan(float a, float b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a decimal</returns>
		public static bool LessThan(decimal a, decimal b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a char</returns>
		public static bool LessThan(char a, char b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a System.DateTime with a System.DateTime</returns>
		public static bool LessThan(System.DateTime a, System.DateTime b)
		{
			return (bool) (a < (System.DateTime)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a System.TimeSpan with a System.TimeSpan</returns>
		public static bool LessThan(System.TimeSpan a, System.TimeSpan b)
		{
			return (bool) (a < (System.TimeSpan)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a byte</returns>
		public static bool LessThan(byte a, byte b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a sbyte</returns>
		public static bool LessThan(sbyte a, sbyte b)
		{
			return (bool) (a < (sbyte)b);
		}


        #endregion

        #region LessThanOrEqual

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a int</returns>
		public static bool LessThanOrEqual(int a, int b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a long</returns>
		public static bool LessThanOrEqual(long a, long b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a short</returns>
		public static bool LessThanOrEqual(short a, short b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a uint</returns>
		public static bool LessThanOrEqual(uint a, uint b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ulong with a ulong</returns>
		public static bool LessThanOrEqual(ulong a, ulong b)
		{
			return (bool) (a <= (ulong)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a ushort</returns>
		public static bool LessThanOrEqual(ushort a, ushort b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a double</returns>
		public static bool LessThanOrEqual(double a, double b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a float</returns>
		public static bool LessThanOrEqual(float a, float b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a decimal</returns>
		public static bool LessThanOrEqual(decimal a, decimal b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a char</returns>
		public static bool LessThanOrEqual(char a, char b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a System.DateTime with a System.DateTime</returns>
		public static bool LessThanOrEqual(System.DateTime a, System.DateTime b)
		{
			return (bool) (a <= (System.DateTime)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a System.TimeSpan with a System.TimeSpan</returns>
		public static bool LessThanOrEqual(System.TimeSpan a, System.TimeSpan b)
		{
			return (bool) (a <= (System.TimeSpan)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a byte</returns>
		public static bool LessThanOrEqual(byte a, byte b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a sbyte</returns>
		public static bool LessThanOrEqual(sbyte a, sbyte b)
		{
			return (bool) (a <= (sbyte)b);
		}


        #endregion

        #region GreaterThan

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a int</returns>
		public static bool GreaterThan(int a, int b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a long</returns>
		public static bool GreaterThan(long a, long b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a short</returns>
		public static bool GreaterThan(short a, short b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a uint</returns>
		public static bool GreaterThan(uint a, uint b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ulong with a ulong</returns>
		public static bool GreaterThan(ulong a, ulong b)
		{
			return (bool) (a > (ulong)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a ushort</returns>
		public static bool GreaterThan(ushort a, ushort b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a double</returns>
		public static bool GreaterThan(double a, double b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a float</returns>
		public static bool GreaterThan(float a, float b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a decimal</returns>
		public static bool GreaterThan(decimal a, decimal b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a char</returns>
		public static bool GreaterThan(char a, char b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a System.DateTime with a System.DateTime</returns>
		public static bool GreaterThan(System.DateTime a, System.DateTime b)
		{
			return (bool) (a > (System.DateTime)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a System.TimeSpan with a System.TimeSpan</returns>
		public static bool GreaterThan(System.TimeSpan a, System.TimeSpan b)
		{
			return (bool) (a > (System.TimeSpan)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a byte</returns>
		public static bool GreaterThan(byte a, byte b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a sbyte</returns>
		public static bool GreaterThan(sbyte a, sbyte b)
		{
			return (bool) (a > (sbyte)b);
		}


        #endregion

        #region GreaterThanOrEqual

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a int</returns>
		public static bool GreaterThanOrEqual(int a, int b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a long</returns>
		public static bool GreaterThanOrEqual(long a, long b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a short</returns>
		public static bool GreaterThanOrEqual(short a, short b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a uint</returns>
		public static bool GreaterThanOrEqual(uint a, uint b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ulong with a ulong</returns>
		public static bool GreaterThanOrEqual(ulong a, ulong b)
		{
			return (bool) (a >= (ulong)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a ushort</returns>
		public static bool GreaterThanOrEqual(ushort a, ushort b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a double</returns>
		public static bool GreaterThanOrEqual(double a, double b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a float</returns>
		public static bool GreaterThanOrEqual(float a, float b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a decimal</returns>
		public static bool GreaterThanOrEqual(decimal a, decimal b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a char</returns>
		public static bool GreaterThanOrEqual(char a, char b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a System.DateTime with a System.DateTime</returns>
		public static bool GreaterThanOrEqual(System.DateTime a, System.DateTime b)
		{
			return (bool) (a >= (System.DateTime)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a System.TimeSpan with a System.TimeSpan</returns>
		public static bool GreaterThanOrEqual(System.TimeSpan a, System.TimeSpan b)
		{
			return (bool) (a >= (System.TimeSpan)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a byte</returns>
		public static bool GreaterThanOrEqual(byte a, byte b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a sbyte</returns>
		public static bool GreaterThanOrEqual(sbyte a, sbyte b)
		{
			return (bool) (a >= (sbyte)b);
		}


        #endregion

        #region Equality

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a bool with a bool</returns>
		public static bool Equality(bool a, bool b)
		{
			return (bool) (a == (bool)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a int</returns>
		public static bool Equality(int a, int b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a long</returns>
		public static bool Equality(long a, long b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a short</returns>
		public static bool Equality(short a, short b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a uint</returns>
		public static bool Equality(uint a, uint b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ulong with a ulong</returns>
		public static bool Equality(ulong a, ulong b)
		{
			return (bool) (a == (ulong)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a ushort</returns>
		public static bool Equality(ushort a, ushort b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a double</returns>
		public static bool Equality(double a, double b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a float</returns>
		public static bool Equality(float a, float b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a decimal</returns>
		public static bool Equality(decimal a, decimal b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a string with a string</returns>
		public static bool Equality(string a, string b)
		{
			return (bool) (a == (string)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a char</returns>
		public static bool Equality(char a, char b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a System.DateTime with a System.DateTime</returns>
		public static bool Equality(System.DateTime a, System.DateTime b)
		{
			return (bool) (a == (System.DateTime)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a System.TimeSpan with a System.TimeSpan</returns>
		public static bool Equality(System.TimeSpan a, System.TimeSpan b)
		{
			return (bool) (a == (System.TimeSpan)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a byte</returns>
		public static bool Equality(byte a, byte b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a sbyte</returns>
		public static bool Equality(sbyte a, sbyte b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a object with a object</returns>
		public static bool Equality(object a, object b)
		{
			return (bool) (a == (object)b);
		}


        #endregion

        #region Inequality

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a bool with a bool</returns>
		public static bool Inequality(bool a, bool b)
		{
			return (bool) (a != (bool)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a int</returns>
		public static bool Inequality(int a, int b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a long</returns>
		public static bool Inequality(long a, long b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a short</returns>
		public static bool Inequality(short a, short b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a uint</returns>
		public static bool Inequality(uint a, uint b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ulong with a ulong</returns>
		public static bool Inequality(ulong a, ulong b)
		{
			return (bool) (a != (ulong)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a ushort</returns>
		public static bool Inequality(ushort a, ushort b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a double</returns>
		public static bool Inequality(double a, double b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a float</returns>
		public static bool Inequality(float a, float b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a decimal</returns>
		public static bool Inequality(decimal a, decimal b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a string with a string</returns>
		public static bool Inequality(string a, string b)
		{
			return (bool) (a != (string)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a char</returns>
		public static bool Inequality(char a, char b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a System.DateTime with a System.DateTime</returns>
		public static bool Inequality(System.DateTime a, System.DateTime b)
		{
			return (bool) (a != (System.DateTime)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a System.TimeSpan with a System.TimeSpan</returns>
		public static bool Inequality(System.TimeSpan a, System.TimeSpan b)
		{
			return (bool) (a != (System.TimeSpan)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a byte</returns>
		public static bool Inequality(byte a, byte b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a sbyte</returns>
		public static bool Inequality(sbyte a, sbyte b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a object with a object</returns>
		public static bool Inequality(object a, object b)
		{
			return (bool) (a != (object)b);
		}


        #endregion

        #region Addition Mixable

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a long</returns>
		public static int Addition(int a, long b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a short</returns>
		public static int Addition(int a, short b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a uint</returns>
		public static int Addition(int a, uint b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a ushort</returns>
		public static int Addition(int a, ushort b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a float</returns>
		public static int Addition(int a, float b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a double</returns>
		public static int Addition(int a, double b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a decimal</returns>
		public static int Addition(int a, decimal b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a char</returns>
		public static int Addition(int a, char b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a byte</returns>
		public static int Addition(int a, byte b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a int with a sbyte</returns>
		public static int Addition(int a, sbyte b)
		{
			return (int) (a + (int)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a int</returns>
		public static long Addition(long a, int b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a short</returns>
		public static long Addition(long a, short b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a uint</returns>
		public static long Addition(long a, uint b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a ushort</returns>
		public static long Addition(long a, ushort b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a float</returns>
		public static long Addition(long a, float b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a double</returns>
		public static long Addition(long a, double b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a decimal</returns>
		public static long Addition(long a, decimal b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a char</returns>
		public static long Addition(long a, char b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a byte</returns>
		public static long Addition(long a, byte b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a long with a sbyte</returns>
		public static long Addition(long a, sbyte b)
		{
			return (long) (a + (long)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a int</returns>
		public static short Addition(short a, int b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a long</returns>
		public static short Addition(short a, long b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a uint</returns>
		public static short Addition(short a, uint b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a ushort</returns>
		public static short Addition(short a, ushort b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a float</returns>
		public static short Addition(short a, float b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a double</returns>
		public static short Addition(short a, double b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a decimal</returns>
		public static short Addition(short a, decimal b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a char</returns>
		public static short Addition(short a, char b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a byte</returns>
		public static short Addition(short a, byte b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a short with a sbyte</returns>
		public static short Addition(short a, sbyte b)
		{
			return (short) (a + (short)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a int</returns>
		public static uint Addition(uint a, int b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a long</returns>
		public static uint Addition(uint a, long b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a short</returns>
		public static uint Addition(uint a, short b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a ushort</returns>
		public static uint Addition(uint a, ushort b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a float</returns>
		public static uint Addition(uint a, float b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a double</returns>
		public static uint Addition(uint a, double b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a decimal</returns>
		public static uint Addition(uint a, decimal b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a char</returns>
		public static uint Addition(uint a, char b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a byte</returns>
		public static uint Addition(uint a, byte b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a uint with a sbyte</returns>
		public static uint Addition(uint a, sbyte b)
		{
			return (uint) (a + (uint)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a int</returns>
		public static ushort Addition(ushort a, int b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a long</returns>
		public static ushort Addition(ushort a, long b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a short</returns>
		public static ushort Addition(ushort a, short b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a uint</returns>
		public static ushort Addition(ushort a, uint b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a float</returns>
		public static ushort Addition(ushort a, float b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a double</returns>
		public static ushort Addition(ushort a, double b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a decimal</returns>
		public static ushort Addition(ushort a, decimal b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a char</returns>
		public static ushort Addition(ushort a, char b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a byte</returns>
		public static ushort Addition(ushort a, byte b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a ushort with a sbyte</returns>
		public static ushort Addition(ushort a, sbyte b)
		{
			return (ushort) (a + (ushort)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a int</returns>
		public static float Addition(float a, int b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a long</returns>
		public static float Addition(float a, long b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a short</returns>
		public static float Addition(float a, short b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a uint</returns>
		public static float Addition(float a, uint b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a ushort</returns>
		public static float Addition(float a, ushort b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a double</returns>
		public static float Addition(float a, double b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a decimal</returns>
		public static float Addition(float a, decimal b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a char</returns>
		public static float Addition(float a, char b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a byte</returns>
		public static float Addition(float a, byte b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a float with a sbyte</returns>
		public static float Addition(float a, sbyte b)
		{
			return (float) (a + (float)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a int</returns>
		public static double Addition(double a, int b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a long</returns>
		public static double Addition(double a, long b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a short</returns>
		public static double Addition(double a, short b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a uint</returns>
		public static double Addition(double a, uint b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a ushort</returns>
		public static double Addition(double a, ushort b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a float</returns>
		public static double Addition(double a, float b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a decimal</returns>
		public static double Addition(double a, decimal b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a char</returns>
		public static double Addition(double a, char b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a byte</returns>
		public static double Addition(double a, byte b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a double with a sbyte</returns>
		public static double Addition(double a, sbyte b)
		{
			return (double) (a + (double)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a int</returns>
		public static decimal Addition(decimal a, int b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a long</returns>
		public static decimal Addition(decimal a, long b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a short</returns>
		public static decimal Addition(decimal a, short b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a uint</returns>
		public static decimal Addition(decimal a, uint b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a ushort</returns>
		public static decimal Addition(decimal a, ushort b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a float</returns>
		public static decimal Addition(decimal a, float b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a double</returns>
		public static decimal Addition(decimal a, double b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a char</returns>
		public static decimal Addition(decimal a, char b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a byte</returns>
		public static decimal Addition(decimal a, byte b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a decimal with a sbyte</returns>
		public static decimal Addition(decimal a, sbyte b)
		{
			return (decimal) (a + (decimal)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a int</returns>
		public static string Addition(string a, int b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a long</returns>
		public static string Addition(string a, long b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a short</returns>
		public static string Addition(string a, short b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a uint</returns>
		public static string Addition(string a, uint b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a ushort</returns>
		public static string Addition(string a, ushort b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a float</returns>
		public static string Addition(string a, float b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a double</returns>
		public static string Addition(string a, double b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a decimal</returns>
		public static string Addition(string a, decimal b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a char</returns>
		public static string Addition(string a, char b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a System.DateTime</returns>
		public static string Addition(string a, System.DateTime b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a System.TimeSpan</returns>
		public static string Addition(string a, System.TimeSpan b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a byte</returns>
		public static string Addition(string a, byte b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a string with a sbyte</returns>
		public static string Addition(string a, sbyte b)
		{
			return (string) (a + b.ToString());
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a char with a int</returns>
		public static char Addition(char a, int b)
		{
			return (char) (a + (char)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a char with a long</returns>
		public static char Addition(char a, long b)
		{
			return (char) (a + (char)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a char with a short</returns>
		public static char Addition(char a, short b)
		{
			return (char) (a + (char)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a char with a uint</returns>
		public static char Addition(char a, uint b)
		{
			return (char) (a + (char)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a char with a ushort</returns>
		public static char Addition(char a, ushort b)
		{
			return (char) (a + (char)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a char with a byte</returns>
		public static char Addition(char a, byte b)
		{
			return (char) (a + (char)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a char with a sbyte</returns>
		public static char Addition(char a, sbyte b)
		{
			return (char) (a + (char)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a System.DateTime with a System.TimeSpan</returns>
		public static System.DateTime Addition(System.DateTime a, System.TimeSpan b)
		{
			return (System.DateTime) (a + b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a int</returns>
		public static byte Addition(byte a, int b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a long</returns>
		public static byte Addition(byte a, long b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a short</returns>
		public static byte Addition(byte a, short b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a uint</returns>
		public static byte Addition(byte a, uint b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a ushort</returns>
		public static byte Addition(byte a, ushort b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a float</returns>
		public static byte Addition(byte a, float b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a double</returns>
		public static byte Addition(byte a, double b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a decimal</returns>
		public static byte Addition(byte a, decimal b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a char</returns>
		public static byte Addition(byte a, char b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a byte with a sbyte</returns>
		public static byte Addition(byte a, sbyte b)
		{
			return (byte) (a + (byte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a int</returns>
		public static sbyte Addition(sbyte a, int b)
		{
			return (sbyte) (a + (sbyte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a long</returns>
		public static sbyte Addition(sbyte a, long b)
		{
			return (sbyte) (a + (sbyte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a short</returns>
		public static sbyte Addition(sbyte a, short b)
		{
			return (sbyte) (a + (sbyte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a uint</returns>
		public static sbyte Addition(sbyte a, uint b)
		{
			return (sbyte) (a + (sbyte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a ushort</returns>
		public static sbyte Addition(sbyte a, ushort b)
		{
			return (sbyte) (a + (sbyte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a float</returns>
		public static sbyte Addition(sbyte a, float b)
		{
			return (sbyte) (a + (sbyte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a double</returns>
		public static sbyte Addition(sbyte a, double b)
		{
			return (sbyte) (a + (sbyte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a decimal</returns>
		public static sbyte Addition(sbyte a, decimal b)
		{
			return (sbyte) (a + (sbyte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a char</returns>
		public static sbyte Addition(sbyte a, char b)
		{
			return (sbyte) (a + (sbyte)b);
		}

		/// <summary>
        /// Perform an Addition
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Addition of a sbyte with a byte</returns>
		public static sbyte Addition(sbyte a, byte b)
		{
			return (sbyte) (a + (sbyte)b);
		}


        #endregion

        #region Subtraction Mixable

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a long</returns>
		public static int Subtraction(int a, long b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a short</returns>
		public static int Subtraction(int a, short b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a uint</returns>
		public static int Subtraction(int a, uint b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a ushort</returns>
		public static int Subtraction(int a, ushort b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a float</returns>
		public static int Subtraction(int a, float b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a double</returns>
		public static int Subtraction(int a, double b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a decimal</returns>
		public static int Subtraction(int a, decimal b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a char</returns>
		public static int Subtraction(int a, char b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a byte</returns>
		public static int Subtraction(int a, byte b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a int with a sbyte</returns>
		public static int Subtraction(int a, sbyte b)
		{
			return (int) (a - (int)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a int</returns>
		public static long Subtraction(long a, int b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a short</returns>
		public static long Subtraction(long a, short b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a uint</returns>
		public static long Subtraction(long a, uint b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a ushort</returns>
		public static long Subtraction(long a, ushort b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a float</returns>
		public static long Subtraction(long a, float b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a double</returns>
		public static long Subtraction(long a, double b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a decimal</returns>
		public static long Subtraction(long a, decimal b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a char</returns>
		public static long Subtraction(long a, char b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a byte</returns>
		public static long Subtraction(long a, byte b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a long with a sbyte</returns>
		public static long Subtraction(long a, sbyte b)
		{
			return (long) (a - (long)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a int</returns>
		public static short Subtraction(short a, int b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a long</returns>
		public static short Subtraction(short a, long b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a uint</returns>
		public static short Subtraction(short a, uint b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a ushort</returns>
		public static short Subtraction(short a, ushort b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a float</returns>
		public static short Subtraction(short a, float b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a double</returns>
		public static short Subtraction(short a, double b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a decimal</returns>
		public static short Subtraction(short a, decimal b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a char</returns>
		public static short Subtraction(short a, char b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a byte</returns>
		public static short Subtraction(short a, byte b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a short with a sbyte</returns>
		public static short Subtraction(short a, sbyte b)
		{
			return (short) (a - (short)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a int</returns>
		public static uint Subtraction(uint a, int b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a long</returns>
		public static uint Subtraction(uint a, long b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a short</returns>
		public static uint Subtraction(uint a, short b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a ushort</returns>
		public static uint Subtraction(uint a, ushort b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a float</returns>
		public static uint Subtraction(uint a, float b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a double</returns>
		public static uint Subtraction(uint a, double b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a decimal</returns>
		public static uint Subtraction(uint a, decimal b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a byte</returns>
		public static uint Subtraction(uint a, byte b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a uint with a sbyte</returns>
		public static uint Subtraction(uint a, sbyte b)
		{
			return (uint) (a - (uint)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a int</returns>
		public static ushort Subtraction(ushort a, int b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a long</returns>
		public static ushort Subtraction(ushort a, long b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a short</returns>
		public static ushort Subtraction(ushort a, short b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a uint</returns>
		public static ushort Subtraction(ushort a, uint b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a float</returns>
		public static ushort Subtraction(ushort a, float b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a double</returns>
		public static ushort Subtraction(ushort a, double b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a decimal</returns>
		public static ushort Subtraction(ushort a, decimal b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a byte</returns>
		public static ushort Subtraction(ushort a, byte b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a ushort with a sbyte</returns>
		public static ushort Subtraction(ushort a, sbyte b)
		{
			return (ushort) (a - (ushort)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a int</returns>
		public static float Subtraction(float a, int b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a long</returns>
		public static float Subtraction(float a, long b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a short</returns>
		public static float Subtraction(float a, short b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a uint</returns>
		public static float Subtraction(float a, uint b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a ushort</returns>
		public static float Subtraction(float a, ushort b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a double</returns>
		public static float Subtraction(float a, double b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a decimal</returns>
		public static float Subtraction(float a, decimal b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a char</returns>
		public static float Subtraction(float a, char b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a byte</returns>
		public static float Subtraction(float a, byte b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a float with a sbyte</returns>
		public static float Subtraction(float a, sbyte b)
		{
			return (float) (a - (float)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a int</returns>
		public static double Subtraction(double a, int b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a long</returns>
		public static double Subtraction(double a, long b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a short</returns>
		public static double Subtraction(double a, short b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a uint</returns>
		public static double Subtraction(double a, uint b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a ushort</returns>
		public static double Subtraction(double a, ushort b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a float</returns>
		public static double Subtraction(double a, float b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a decimal</returns>
		public static double Subtraction(double a, decimal b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a char</returns>
		public static double Subtraction(double a, char b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a byte</returns>
		public static double Subtraction(double a, byte b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a double with a sbyte</returns>
		public static double Subtraction(double a, sbyte b)
		{
			return (double) (a - (double)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a int</returns>
		public static decimal Subtraction(decimal a, int b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a long</returns>
		public static decimal Subtraction(decimal a, long b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a short</returns>
		public static decimal Subtraction(decimal a, short b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a uint</returns>
		public static decimal Subtraction(decimal a, uint b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a ushort</returns>
		public static decimal Subtraction(decimal a, ushort b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a float</returns>
		public static decimal Subtraction(decimal a, float b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a double</returns>
		public static decimal Subtraction(decimal a, double b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a char</returns>
		public static decimal Subtraction(decimal a, char b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a byte</returns>
		public static decimal Subtraction(decimal a, byte b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a decimal with a sbyte</returns>
		public static decimal Subtraction(decimal a, sbyte b)
		{
			return (decimal) (a - (decimal)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a char with a int</returns>
		public static char Subtraction(char a, int b)
		{
			return (char) (a - (char)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a char with a long</returns>
		public static char Subtraction(char a, long b)
		{
			return (char) (a - (char)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a char with a short</returns>
		public static char Subtraction(char a, short b)
		{
			return (char) (a - (char)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a char with a uint</returns>
		public static char Subtraction(char a, uint b)
		{
			return (char) (a - (char)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a char with a ushort</returns>
		public static char Subtraction(char a, ushort b)
		{
			return (char) (a - (char)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a char with a byte</returns>
		public static char Subtraction(char a, byte b)
		{
			return (char) (a - (char)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a char with a sbyte</returns>
		public static char Subtraction(char a, sbyte b)
		{
			return (char) (a - (char)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a System.DateTime with a System.TimeSpan</returns>
		public static System.DateTime Subtraction(System.DateTime a, System.TimeSpan b)
		{
			return (System.DateTime) (a - b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a byte with a sbyte</returns>
		public static byte Subtraction(byte a, sbyte b)
		{
			return (byte) (a - (byte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a int</returns>
		public static sbyte Subtraction(sbyte a, int b)
		{
			return (sbyte) (a - (sbyte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a long</returns>
		public static sbyte Subtraction(sbyte a, long b)
		{
			return (sbyte) (a - (sbyte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a short</returns>
		public static sbyte Subtraction(sbyte a, short b)
		{
			return (sbyte) (a - (sbyte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a uint</returns>
		public static sbyte Subtraction(sbyte a, uint b)
		{
			return (sbyte) (a - (sbyte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a ushort</returns>
		public static sbyte Subtraction(sbyte a, ushort b)
		{
			return (sbyte) (a - (sbyte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a float</returns>
		public static sbyte Subtraction(sbyte a, float b)
		{
			return (sbyte) (a - (sbyte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a double</returns>
		public static sbyte Subtraction(sbyte a, double b)
		{
			return (sbyte) (a - (sbyte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a decimal</returns>
		public static sbyte Subtraction(sbyte a, decimal b)
		{
			return (sbyte) (a - (sbyte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a char</returns>
		public static sbyte Subtraction(sbyte a, char b)
		{
			return (sbyte) (a - (sbyte)b);
		}

		/// <summary>
        /// Perform an Subtraction
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Subtraction of a sbyte with a byte</returns>
		public static sbyte Subtraction(sbyte a, byte b)
		{
			return (sbyte) (a - (sbyte)b);
		}


        #endregion

        #region Multiply Mixable

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a long</returns>
		public static int Multiply(int a, long b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a short</returns>
		public static int Multiply(int a, short b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a uint</returns>
		public static int Multiply(int a, uint b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a ushort</returns>
		public static int Multiply(int a, ushort b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a float</returns>
		public static int Multiply(int a, float b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a double</returns>
		public static int Multiply(int a, double b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a decimal</returns>
		public static int Multiply(int a, decimal b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a char</returns>
		public static int Multiply(int a, char b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a byte</returns>
		public static int Multiply(int a, byte b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a int with a sbyte</returns>
		public static int Multiply(int a, sbyte b)
		{
			return (int) (a * (int)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a int</returns>
		public static long Multiply(long a, int b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a short</returns>
		public static long Multiply(long a, short b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a uint</returns>
		public static long Multiply(long a, uint b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a ushort</returns>
		public static long Multiply(long a, ushort b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a float</returns>
		public static long Multiply(long a, float b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a double</returns>
		public static long Multiply(long a, double b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a decimal</returns>
		public static long Multiply(long a, decimal b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a char</returns>
		public static long Multiply(long a, char b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a byte</returns>
		public static long Multiply(long a, byte b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a long with a sbyte</returns>
		public static long Multiply(long a, sbyte b)
		{
			return (long) (a * (long)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a int</returns>
		public static short Multiply(short a, int b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a long</returns>
		public static short Multiply(short a, long b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a uint</returns>
		public static short Multiply(short a, uint b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a ushort</returns>
		public static short Multiply(short a, ushort b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a float</returns>
		public static short Multiply(short a, float b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a double</returns>
		public static short Multiply(short a, double b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a decimal</returns>
		public static short Multiply(short a, decimal b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a char</returns>
		public static short Multiply(short a, char b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a byte</returns>
		public static short Multiply(short a, byte b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a short with a sbyte</returns>
		public static short Multiply(short a, sbyte b)
		{
			return (short) (a * (short)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a int</returns>
		public static uint Multiply(uint a, int b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a long</returns>
		public static uint Multiply(uint a, long b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a short</returns>
		public static uint Multiply(uint a, short b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a ushort</returns>
		public static uint Multiply(uint a, ushort b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a float</returns>
		public static uint Multiply(uint a, float b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a double</returns>
		public static uint Multiply(uint a, double b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a decimal</returns>
		public static uint Multiply(uint a, decimal b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a char</returns>
		public static uint Multiply(uint a, char b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a byte</returns>
		public static uint Multiply(uint a, byte b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a uint with a sbyte</returns>
		public static uint Multiply(uint a, sbyte b)
		{
			return (uint) (a * (uint)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a int</returns>
		public static ushort Multiply(ushort a, int b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a long</returns>
		public static ushort Multiply(ushort a, long b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a short</returns>
		public static ushort Multiply(ushort a, short b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a uint</returns>
		public static ushort Multiply(ushort a, uint b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a float</returns>
		public static ushort Multiply(ushort a, float b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a double</returns>
		public static ushort Multiply(ushort a, double b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a decimal</returns>
		public static ushort Multiply(ushort a, decimal b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a char</returns>
		public static ushort Multiply(ushort a, char b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a byte</returns>
		public static ushort Multiply(ushort a, byte b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a ushort with a sbyte</returns>
		public static ushort Multiply(ushort a, sbyte b)
		{
			return (ushort) (a * (ushort)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a int</returns>
		public static float Multiply(float a, int b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a long</returns>
		public static float Multiply(float a, long b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a short</returns>
		public static float Multiply(float a, short b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a uint</returns>
		public static float Multiply(float a, uint b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a ushort</returns>
		public static float Multiply(float a, ushort b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a double</returns>
		public static float Multiply(float a, double b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a decimal</returns>
		public static float Multiply(float a, decimal b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a char</returns>
		public static float Multiply(float a, char b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a byte</returns>
		public static float Multiply(float a, byte b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a float with a sbyte</returns>
		public static float Multiply(float a, sbyte b)
		{
			return (float) (a * (float)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a int</returns>
		public static double Multiply(double a, int b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a long</returns>
		public static double Multiply(double a, long b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a short</returns>
		public static double Multiply(double a, short b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a uint</returns>
		public static double Multiply(double a, uint b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a ushort</returns>
		public static double Multiply(double a, ushort b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a float</returns>
		public static double Multiply(double a, float b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a decimal</returns>
		public static double Multiply(double a, decimal b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a char</returns>
		public static double Multiply(double a, char b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a byte</returns>
		public static double Multiply(double a, byte b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a double with a sbyte</returns>
		public static double Multiply(double a, sbyte b)
		{
			return (double) (a * (double)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a int</returns>
		public static decimal Multiply(decimal a, int b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a long</returns>
		public static decimal Multiply(decimal a, long b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a short</returns>
		public static decimal Multiply(decimal a, short b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a uint</returns>
		public static decimal Multiply(decimal a, uint b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a ushort</returns>
		public static decimal Multiply(decimal a, ushort b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a float</returns>
		public static decimal Multiply(decimal a, float b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a double</returns>
		public static decimal Multiply(decimal a, double b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a char</returns>
		public static decimal Multiply(decimal a, char b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a byte</returns>
		public static decimal Multiply(decimal a, byte b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a decimal with a sbyte</returns>
		public static decimal Multiply(decimal a, sbyte b)
		{
			return (decimal) (a * (decimal)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a char with a int</returns>
		public static char Multiply(char a, int b)
		{
			return (char) (a * (char)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a char with a long</returns>
		public static char Multiply(char a, long b)
		{
			return (char) (a * (char)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a char with a short</returns>
		public static char Multiply(char a, short b)
		{
			return (char) (a * (char)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a char with a uint</returns>
		public static char Multiply(char a, uint b)
		{
			return (char) (a * (char)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a char with a ushort</returns>
		public static char Multiply(char a, ushort b)
		{
			return (char) (a * (char)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a char with a byte</returns>
		public static char Multiply(char a, byte b)
		{
			return (char) (a * (char)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a char with a sbyte</returns>
		public static char Multiply(char a, sbyte b)
		{
			return (char) (a * (char)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a int</returns>
		public static byte Multiply(byte a, int b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a long</returns>
		public static byte Multiply(byte a, long b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a short</returns>
		public static byte Multiply(byte a, short b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a uint</returns>
		public static byte Multiply(byte a, uint b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a ushort</returns>
		public static byte Multiply(byte a, ushort b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a float</returns>
		public static byte Multiply(byte a, float b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a double</returns>
		public static byte Multiply(byte a, double b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a decimal</returns>
		public static byte Multiply(byte a, decimal b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a char</returns>
		public static byte Multiply(byte a, char b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a byte with a sbyte</returns>
		public static byte Multiply(byte a, sbyte b)
		{
			return (byte) (a * (byte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a int</returns>
		public static sbyte Multiply(sbyte a, int b)
		{
			return (sbyte) (a * (sbyte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a long</returns>
		public static sbyte Multiply(sbyte a, long b)
		{
			return (sbyte) (a * (sbyte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a short</returns>
		public static sbyte Multiply(sbyte a, short b)
		{
			return (sbyte) (a * (sbyte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a uint</returns>
		public static sbyte Multiply(sbyte a, uint b)
		{
			return (sbyte) (a * (sbyte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a ushort</returns>
		public static sbyte Multiply(sbyte a, ushort b)
		{
			return (sbyte) (a * (sbyte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a float</returns>
		public static sbyte Multiply(sbyte a, float b)
		{
			return (sbyte) (a * (sbyte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a double</returns>
		public static sbyte Multiply(sbyte a, double b)
		{
			return (sbyte) (a * (sbyte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a decimal</returns>
		public static sbyte Multiply(sbyte a, decimal b)
		{
			return (sbyte) (a * (sbyte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a char</returns>
		public static sbyte Multiply(sbyte a, char b)
		{
			return (sbyte) (a * (sbyte)b);
		}

		/// <summary>
        /// Perform an Multiply
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Multiply of a sbyte with a byte</returns>
		public static sbyte Multiply(sbyte a, byte b)
		{
			return (sbyte) (a * (sbyte)b);
		}


        #endregion

        #region Division Mixable

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a long</returns>
		public static int Division(int a, long b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a short</returns>
		public static int Division(int a, short b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a uint</returns>
		public static int Division(int a, uint b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a ushort</returns>
		public static int Division(int a, ushort b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a float</returns>
		public static int Division(int a, float b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a double</returns>
		public static int Division(int a, double b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a decimal</returns>
		public static int Division(int a, decimal b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a char</returns>
		public static int Division(int a, char b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a byte</returns>
		public static int Division(int a, byte b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a int with a sbyte</returns>
		public static int Division(int a, sbyte b)
		{
			return (int) (a / (int)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a int</returns>
		public static long Division(long a, int b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a short</returns>
		public static long Division(long a, short b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a uint</returns>
		public static long Division(long a, uint b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a ushort</returns>
		public static long Division(long a, ushort b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a float</returns>
		public static long Division(long a, float b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a double</returns>
		public static long Division(long a, double b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a decimal</returns>
		public static long Division(long a, decimal b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a char</returns>
		public static long Division(long a, char b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a byte</returns>
		public static long Division(long a, byte b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a long with a sbyte</returns>
		public static long Division(long a, sbyte b)
		{
			return (long) (a / (long)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a int</returns>
		public static short Division(short a, int b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a long</returns>
		public static short Division(short a, long b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a uint</returns>
		public static short Division(short a, uint b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a ushort</returns>
		public static short Division(short a, ushort b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a float</returns>
		public static short Division(short a, float b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a double</returns>
		public static short Division(short a, double b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a decimal</returns>
		public static short Division(short a, decimal b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a char</returns>
		public static short Division(short a, char b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a byte</returns>
		public static short Division(short a, byte b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a short with a sbyte</returns>
		public static short Division(short a, sbyte b)
		{
			return (short) (a / (short)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a int</returns>
		public static uint Division(uint a, int b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a long</returns>
		public static uint Division(uint a, long b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a short</returns>
		public static uint Division(uint a, short b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a ushort</returns>
		public static uint Division(uint a, ushort b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a float</returns>
		public static uint Division(uint a, float b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a double</returns>
		public static uint Division(uint a, double b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a decimal</returns>
		public static uint Division(uint a, decimal b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a char</returns>
		public static uint Division(uint a, char b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a byte</returns>
		public static uint Division(uint a, byte b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a uint with a sbyte</returns>
		public static uint Division(uint a, sbyte b)
		{
			return (uint) (a / (uint)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a int</returns>
		public static ushort Division(ushort a, int b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a long</returns>
		public static ushort Division(ushort a, long b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a short</returns>
		public static ushort Division(ushort a, short b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a uint</returns>
		public static ushort Division(ushort a, uint b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a float</returns>
		public static ushort Division(ushort a, float b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a double</returns>
		public static ushort Division(ushort a, double b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a decimal</returns>
		public static ushort Division(ushort a, decimal b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a char</returns>
		public static ushort Division(ushort a, char b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a byte</returns>
		public static ushort Division(ushort a, byte b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a ushort with a sbyte</returns>
		public static ushort Division(ushort a, sbyte b)
		{
			return (ushort) (a / (ushort)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a int</returns>
		public static float Division(float a, int b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a long</returns>
		public static float Division(float a, long b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a short</returns>
		public static float Division(float a, short b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a uint</returns>
		public static float Division(float a, uint b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a ushort</returns>
		public static float Division(float a, ushort b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a double</returns>
		public static float Division(float a, double b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a decimal</returns>
		public static float Division(float a, decimal b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a char</returns>
		public static float Division(float a, char b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a byte</returns>
		public static float Division(float a, byte b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a float with a sbyte</returns>
		public static float Division(float a, sbyte b)
		{
			return (float) (a / (float)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a int</returns>
		public static double Division(double a, int b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a long</returns>
		public static double Division(double a, long b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a short</returns>
		public static double Division(double a, short b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a uint</returns>
		public static double Division(double a, uint b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a ushort</returns>
		public static double Division(double a, ushort b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a float</returns>
		public static double Division(double a, float b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a decimal</returns>
		public static double Division(double a, decimal b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a char</returns>
		public static double Division(double a, char b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a byte</returns>
		public static double Division(double a, byte b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a double with a sbyte</returns>
		public static double Division(double a, sbyte b)
		{
			return (double) (a / (double)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a int</returns>
		public static decimal Division(decimal a, int b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a long</returns>
		public static decimal Division(decimal a, long b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a short</returns>
		public static decimal Division(decimal a, short b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a uint</returns>
		public static decimal Division(decimal a, uint b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a ushort</returns>
		public static decimal Division(decimal a, ushort b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a float</returns>
		public static decimal Division(decimal a, float b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a double</returns>
		public static decimal Division(decimal a, double b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a char</returns>
		public static decimal Division(decimal a, char b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a byte</returns>
		public static decimal Division(decimal a, byte b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a decimal with a sbyte</returns>
		public static decimal Division(decimal a, sbyte b)
		{
			return (decimal) (a / (decimal)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a char with a int</returns>
		public static char Division(char a, int b)
		{
			return (char) (a / (char)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a char with a long</returns>
		public static char Division(char a, long b)
		{
			return (char) (a / (char)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a char with a short</returns>
		public static char Division(char a, short b)
		{
			return (char) (a / (char)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a char with a uint</returns>
		public static char Division(char a, uint b)
		{
			return (char) (a / (char)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a char with a ushort</returns>
		public static char Division(char a, ushort b)
		{
			return (char) (a / (char)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a char with a byte</returns>
		public static char Division(char a, byte b)
		{
			return (char) (a / (char)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a char with a sbyte</returns>
		public static char Division(char a, sbyte b)
		{
			return (char) (a / (char)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a int</returns>
		public static byte Division(byte a, int b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a long</returns>
		public static byte Division(byte a, long b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a short</returns>
		public static byte Division(byte a, short b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a uint</returns>
		public static byte Division(byte a, uint b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a ushort</returns>
		public static byte Division(byte a, ushort b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a float</returns>
		public static byte Division(byte a, float b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a double</returns>
		public static byte Division(byte a, double b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a decimal</returns>
		public static byte Division(byte a, decimal b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a char</returns>
		public static byte Division(byte a, char b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a byte with a sbyte</returns>
		public static byte Division(byte a, sbyte b)
		{
			return (byte) (a / (byte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a int</returns>
		public static sbyte Division(sbyte a, int b)
		{
			return (sbyte) (a / (sbyte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a long</returns>
		public static sbyte Division(sbyte a, long b)
		{
			return (sbyte) (a / (sbyte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a short</returns>
		public static sbyte Division(sbyte a, short b)
		{
			return (sbyte) (a / (sbyte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a uint</returns>
		public static sbyte Division(sbyte a, uint b)
		{
			return (sbyte) (a / (sbyte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a ushort</returns>
		public static sbyte Division(sbyte a, ushort b)
		{
			return (sbyte) (a / (sbyte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a float</returns>
		public static sbyte Division(sbyte a, float b)
		{
			return (sbyte) (a / (sbyte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a double</returns>
		public static sbyte Division(sbyte a, double b)
		{
			return (sbyte) (a / (sbyte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a decimal</returns>
		public static sbyte Division(sbyte a, decimal b)
		{
			return (sbyte) (a / (sbyte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a char</returns>
		public static sbyte Division(sbyte a, char b)
		{
			return (sbyte) (a / (sbyte)b);
		}

		/// <summary>
        /// Perform an Division
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Division of a sbyte with a byte</returns>
		public static sbyte Division(sbyte a, byte b)
		{
			return (sbyte) (a / (sbyte)b);
		}


        #endregion

        #region Modulus Mixable

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a long</returns>
		public static int Modulus(int a, long b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a short</returns>
		public static int Modulus(int a, short b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a uint</returns>
		public static int Modulus(int a, uint b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a ushort</returns>
		public static int Modulus(int a, ushort b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a float</returns>
		public static int Modulus(int a, float b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a double</returns>
		public static int Modulus(int a, double b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a decimal</returns>
		public static int Modulus(int a, decimal b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a char</returns>
		public static int Modulus(int a, char b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a byte</returns>
		public static int Modulus(int a, byte b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a int with a sbyte</returns>
		public static int Modulus(int a, sbyte b)
		{
			return (int) (a % (int)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a int</returns>
		public static long Modulus(long a, int b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a short</returns>
		public static long Modulus(long a, short b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a uint</returns>
		public static long Modulus(long a, uint b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a ushort</returns>
		public static long Modulus(long a, ushort b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a float</returns>
		public static long Modulus(long a, float b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a double</returns>
		public static long Modulus(long a, double b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a decimal</returns>
		public static long Modulus(long a, decimal b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a char</returns>
		public static long Modulus(long a, char b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a byte</returns>
		public static long Modulus(long a, byte b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a long with a sbyte</returns>
		public static long Modulus(long a, sbyte b)
		{
			return (long) (a % (long)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a int</returns>
		public static short Modulus(short a, int b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a long</returns>
		public static short Modulus(short a, long b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a uint</returns>
		public static short Modulus(short a, uint b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a ushort</returns>
		public static short Modulus(short a, ushort b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a float</returns>
		public static short Modulus(short a, float b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a double</returns>
		public static short Modulus(short a, double b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a decimal</returns>
		public static short Modulus(short a, decimal b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a char</returns>
		public static short Modulus(short a, char b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a byte</returns>
		public static short Modulus(short a, byte b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a short with a sbyte</returns>
		public static short Modulus(short a, sbyte b)
		{
			return (short) (a % (short)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a int</returns>
		public static uint Modulus(uint a, int b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a long</returns>
		public static uint Modulus(uint a, long b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a short</returns>
		public static uint Modulus(uint a, short b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a ushort</returns>
		public static uint Modulus(uint a, ushort b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a float</returns>
		public static uint Modulus(uint a, float b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a double</returns>
		public static uint Modulus(uint a, double b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a decimal</returns>
		public static uint Modulus(uint a, decimal b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a char</returns>
		public static uint Modulus(uint a, char b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a byte</returns>
		public static uint Modulus(uint a, byte b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a uint with a sbyte</returns>
		public static uint Modulus(uint a, sbyte b)
		{
			return (uint) (a % (uint)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a int</returns>
		public static ushort Modulus(ushort a, int b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a long</returns>
		public static ushort Modulus(ushort a, long b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a short</returns>
		public static ushort Modulus(ushort a, short b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a uint</returns>
		public static ushort Modulus(ushort a, uint b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a float</returns>
		public static ushort Modulus(ushort a, float b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a double</returns>
		public static ushort Modulus(ushort a, double b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a decimal</returns>
		public static ushort Modulus(ushort a, decimal b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a char</returns>
		public static ushort Modulus(ushort a, char b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a byte</returns>
		public static ushort Modulus(ushort a, byte b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a ushort with a sbyte</returns>
		public static ushort Modulus(ushort a, sbyte b)
		{
			return (ushort) (a % (ushort)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a int</returns>
		public static float Modulus(float a, int b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a long</returns>
		public static float Modulus(float a, long b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a short</returns>
		public static float Modulus(float a, short b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a uint</returns>
		public static float Modulus(float a, uint b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a ushort</returns>
		public static float Modulus(float a, ushort b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a double</returns>
		public static float Modulus(float a, double b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a decimal</returns>
		public static float Modulus(float a, decimal b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a char</returns>
		public static float Modulus(float a, char b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a byte</returns>
		public static float Modulus(float a, byte b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a float with a sbyte</returns>
		public static float Modulus(float a, sbyte b)
		{
			return (float) (a % (float)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a int</returns>
		public static double Modulus(double a, int b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a long</returns>
		public static double Modulus(double a, long b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a short</returns>
		public static double Modulus(double a, short b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a uint</returns>
		public static double Modulus(double a, uint b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a ushort</returns>
		public static double Modulus(double a, ushort b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a float</returns>
		public static double Modulus(double a, float b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a decimal</returns>
		public static double Modulus(double a, decimal b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a char</returns>
		public static double Modulus(double a, char b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a byte</returns>
		public static double Modulus(double a, byte b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a double with a sbyte</returns>
		public static double Modulus(double a, sbyte b)
		{
			return (double) (a % (double)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a int</returns>
		public static decimal Modulus(decimal a, int b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a long</returns>
		public static decimal Modulus(decimal a, long b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a short</returns>
		public static decimal Modulus(decimal a, short b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a uint</returns>
		public static decimal Modulus(decimal a, uint b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a ushort</returns>
		public static decimal Modulus(decimal a, ushort b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a float</returns>
		public static decimal Modulus(decimal a, float b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a double</returns>
		public static decimal Modulus(decimal a, double b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a char</returns>
		public static decimal Modulus(decimal a, char b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a byte</returns>
		public static decimal Modulus(decimal a, byte b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a decimal with a sbyte</returns>
		public static decimal Modulus(decimal a, sbyte b)
		{
			return (decimal) (a % (decimal)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a char with a int</returns>
		public static char Modulus(char a, int b)
		{
			return (char) (a % (char)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a char with a long</returns>
		public static char Modulus(char a, long b)
		{
			return (char) (a % (char)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a char with a short</returns>
		public static char Modulus(char a, short b)
		{
			return (char) (a % (char)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a char with a uint</returns>
		public static char Modulus(char a, uint b)
		{
			return (char) (a % (char)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a char with a ushort</returns>
		public static char Modulus(char a, ushort b)
		{
			return (char) (a % (char)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a char with a byte</returns>
		public static char Modulus(char a, byte b)
		{
			return (char) (a % (char)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a char with a sbyte</returns>
		public static char Modulus(char a, sbyte b)
		{
			return (char) (a % (char)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a int</returns>
		public static byte Modulus(byte a, int b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a long</returns>
		public static byte Modulus(byte a, long b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a short</returns>
		public static byte Modulus(byte a, short b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a uint</returns>
		public static byte Modulus(byte a, uint b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a ushort</returns>
		public static byte Modulus(byte a, ushort b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a float</returns>
		public static byte Modulus(byte a, float b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a double</returns>
		public static byte Modulus(byte a, double b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a decimal</returns>
		public static byte Modulus(byte a, decimal b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a char</returns>
		public static byte Modulus(byte a, char b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a byte with a sbyte</returns>
		public static byte Modulus(byte a, sbyte b)
		{
			return (byte) (a % (byte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a int</returns>
		public static sbyte Modulus(sbyte a, int b)
		{
			return (sbyte) (a % (sbyte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a long</returns>
		public static sbyte Modulus(sbyte a, long b)
		{
			return (sbyte) (a % (sbyte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a short</returns>
		public static sbyte Modulus(sbyte a, short b)
		{
			return (sbyte) (a % (sbyte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a uint</returns>
		public static sbyte Modulus(sbyte a, uint b)
		{
			return (sbyte) (a % (sbyte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a ushort</returns>
		public static sbyte Modulus(sbyte a, ushort b)
		{
			return (sbyte) (a % (sbyte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a float</returns>
		public static sbyte Modulus(sbyte a, float b)
		{
			return (sbyte) (a % (sbyte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a double</returns>
		public static sbyte Modulus(sbyte a, double b)
		{
			return (sbyte) (a % (sbyte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a decimal</returns>
		public static sbyte Modulus(sbyte a, decimal b)
		{
			return (sbyte) (a % (sbyte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a char</returns>
		public static sbyte Modulus(sbyte a, char b)
		{
			return (sbyte) (a % (sbyte)b);
		}

		/// <summary>
        /// Perform an Modulus
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Modulus of a sbyte with a byte</returns>
		public static sbyte Modulus(sbyte a, byte b)
		{
			return (sbyte) (a % (sbyte)b);
		}


        #endregion

        #region BitwiseOr Mixable

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a int with a long</returns>
		public static int BitwiseOr(int a, long b)
		{
			return (int) (a | (int)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a int with a short</returns>
		public static int BitwiseOr(int a, short b)
		{
			return (int) (a | (int)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a int with a uint</returns>
		public static int BitwiseOr(int a, uint b)
		{
			return (int) (a | (int)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a int with a ushort</returns>
		public static int BitwiseOr(int a, ushort b)
		{
			return (int) (a | (int)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a int with a char</returns>
		public static int BitwiseOr(int a, char b)
		{
			return (int) (a | (int)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a int with a byte</returns>
		public static int BitwiseOr(int a, byte b)
		{
			return (int) (a | (int)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a int with a sbyte</returns>
		public static int BitwiseOr(int a, sbyte b)
		{
			return (int) (a | (int)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a long with a int</returns>
		public static long BitwiseOr(long a, int b)
		{
			return (long) (a | (long)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a long with a short</returns>
		public static long BitwiseOr(long a, short b)
		{
			return (long) (a | (long)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a long with a uint</returns>
		public static long BitwiseOr(long a, uint b)
		{
			return (long) (a | (long)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a long with a ushort</returns>
		public static long BitwiseOr(long a, ushort b)
		{
			return (long) (a | (long)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a long with a char</returns>
		public static long BitwiseOr(long a, char b)
		{
			return (long) (a | (long)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a long with a byte</returns>
		public static long BitwiseOr(long a, byte b)
		{
			return (long) (a | (long)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a long with a sbyte</returns>
		public static long BitwiseOr(long a, sbyte b)
		{
			return (long) (a | (long)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a short with a int</returns>
		public static short BitwiseOr(short a, int b)
		{
			return (short) (a | (short)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a short with a long</returns>
		public static short BitwiseOr(short a, long b)
		{
			return (short) (a | (short)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a short with a uint</returns>
		public static short BitwiseOr(short a, uint b)
		{
			return (short) (a | (short)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a short with a ushort</returns>
		public static short BitwiseOr(short a, ushort b)
		{
			return (short) (a | (short)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a short with a char</returns>
		public static short BitwiseOr(short a, char b)
		{
			return (short) (a | (short)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a short with a byte</returns>
		public static short BitwiseOr(short a, byte b)
		{
			return (short) (a | (short)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a short with a sbyte</returns>
		public static short BitwiseOr(short a, sbyte b)
		{
			return (short) (a | (short)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a uint with a int</returns>
		public static uint BitwiseOr(uint a, int b)
		{
			return (uint) (a | (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a uint with a long</returns>
		public static uint BitwiseOr(uint a, long b)
		{
			return (uint) (a | (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a uint with a short</returns>
		public static uint BitwiseOr(uint a, short b)
		{
			return (uint) (a | (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a uint with a ushort</returns>
		public static uint BitwiseOr(uint a, ushort b)
		{
			return (uint) (a | (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a uint with a char</returns>
		public static uint BitwiseOr(uint a, char b)
		{
			return (uint) (a | (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a uint with a byte</returns>
		public static uint BitwiseOr(uint a, byte b)
		{
			return (uint) (a | (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a uint with a sbyte</returns>
		public static uint BitwiseOr(uint a, sbyte b)
		{
			return (uint) (a | (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a ushort with a int</returns>
		public static ushort BitwiseOr(ushort a, int b)
		{
			return (ushort) (a | (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a ushort with a long</returns>
		public static ushort BitwiseOr(ushort a, long b)
		{
			return (ushort) (a | (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a ushort with a short</returns>
		public static ushort BitwiseOr(ushort a, short b)
		{
			return (ushort) (a | (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a ushort with a uint</returns>
		public static ushort BitwiseOr(ushort a, uint b)
		{
			return (ushort) (a | (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a ushort with a char</returns>
		public static ushort BitwiseOr(ushort a, char b)
		{
			return (ushort) (a | (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a ushort with a byte</returns>
		public static ushort BitwiseOr(ushort a, byte b)
		{
			return (ushort) (a | (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a ushort with a sbyte</returns>
		public static ushort BitwiseOr(ushort a, sbyte b)
		{
			return (ushort) (a | (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a char with a int</returns>
		public static char BitwiseOr(char a, int b)
		{
			return (char) (a | (char)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a char with a long</returns>
		public static char BitwiseOr(char a, long b)
		{
			return (char) (a | (char)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a char with a short</returns>
		public static char BitwiseOr(char a, short b)
		{
			return (char) (a | (char)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a char with a uint</returns>
		public static char BitwiseOr(char a, uint b)
		{
			return (char) (a | (char)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a char with a ushort</returns>
		public static char BitwiseOr(char a, ushort b)
		{
			return (char) (a | (char)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a char with a byte</returns>
		public static char BitwiseOr(char a, byte b)
		{
			return (char) (a | (char)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a char with a sbyte</returns>
		public static char BitwiseOr(char a, sbyte b)
		{
			return (char) (a | (char)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a byte with a int</returns>
		public static byte BitwiseOr(byte a, int b)
		{
			return (byte) (a | (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a byte with a long</returns>
		public static byte BitwiseOr(byte a, long b)
		{
			return (byte) (a | (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a byte with a short</returns>
		public static byte BitwiseOr(byte a, short b)
		{
			return (byte) (a | (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a byte with a uint</returns>
		public static byte BitwiseOr(byte a, uint b)
		{
			return (byte) (a | (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a byte with a ushort</returns>
		public static byte BitwiseOr(byte a, ushort b)
		{
			return (byte) (a | (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a byte with a char</returns>
		public static byte BitwiseOr(byte a, char b)
		{
			return (byte) (a | (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a byte with a sbyte</returns>
		public static byte BitwiseOr(byte a, sbyte b)
		{
			return (byte) (a | (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a sbyte with a int</returns>
		public static sbyte BitwiseOr(sbyte a, int b)
		{
			return (sbyte) (a | (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a sbyte with a long</returns>
		public static sbyte BitwiseOr(sbyte a, long b)
		{
			return (sbyte) (a | (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a sbyte with a short</returns>
		public static sbyte BitwiseOr(sbyte a, short b)
		{
			return (sbyte) (a | (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a sbyte with a uint</returns>
		public static sbyte BitwiseOr(sbyte a, uint b)
		{
			return (sbyte) (a | (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a sbyte with a ushort</returns>
		public static sbyte BitwiseOr(sbyte a, ushort b)
		{
			return (sbyte) (a | (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a sbyte with a char</returns>
		public static sbyte BitwiseOr(sbyte a, char b)
		{
			return (sbyte) (a | (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseOr
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseOr of a sbyte with a byte</returns>
		public static sbyte BitwiseOr(sbyte a, byte b)
		{
			return (sbyte) (a | (sbyte)b);
		}


        #endregion

        #region BitwiseAnd Mixable

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a int with a long</returns>
		public static int BitwiseAnd(int a, long b)
		{
			return (int) (a & (int)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a int with a short</returns>
		public static int BitwiseAnd(int a, short b)
		{
			return (int) (a & (int)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a int with a uint</returns>
		public static int BitwiseAnd(int a, uint b)
		{
			return (int) (a & (int)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a int with a ushort</returns>
		public static int BitwiseAnd(int a, ushort b)
		{
			return (int) (a & (int)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a int with a char</returns>
		public static int BitwiseAnd(int a, char b)
		{
			return (int) (a & (int)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a int with a byte</returns>
		public static int BitwiseAnd(int a, byte b)
		{
			return (int) (a & (int)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a int with a sbyte</returns>
		public static int BitwiseAnd(int a, sbyte b)
		{
			return (int) (a & (int)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a long with a int</returns>
		public static long BitwiseAnd(long a, int b)
		{
			return (long) (a & (long)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a long with a short</returns>
		public static long BitwiseAnd(long a, short b)
		{
			return (long) (a & (long)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a long with a uint</returns>
		public static long BitwiseAnd(long a, uint b)
		{
			return (long) (a & (long)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a long with a ushort</returns>
		public static long BitwiseAnd(long a, ushort b)
		{
			return (long) (a & (long)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a long with a char</returns>
		public static long BitwiseAnd(long a, char b)
		{
			return (long) (a & (long)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a long with a byte</returns>
		public static long BitwiseAnd(long a, byte b)
		{
			return (long) (a & (long)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a long with a sbyte</returns>
		public static long BitwiseAnd(long a, sbyte b)
		{
			return (long) (a & (long)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a short with a int</returns>
		public static short BitwiseAnd(short a, int b)
		{
			return (short) (a & (short)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a short with a long</returns>
		public static short BitwiseAnd(short a, long b)
		{
			return (short) (a & (short)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a short with a uint</returns>
		public static short BitwiseAnd(short a, uint b)
		{
			return (short) (a & (short)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a short with a ushort</returns>
		public static short BitwiseAnd(short a, ushort b)
		{
			return (short) (a & (short)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a short with a char</returns>
		public static short BitwiseAnd(short a, char b)
		{
			return (short) (a & (short)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a short with a byte</returns>
		public static short BitwiseAnd(short a, byte b)
		{
			return (short) (a & (short)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a short with a sbyte</returns>
		public static short BitwiseAnd(short a, sbyte b)
		{
			return (short) (a & (short)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a uint with a int</returns>
		public static uint BitwiseAnd(uint a, int b)
		{
			return (uint) (a & (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a uint with a long</returns>
		public static uint BitwiseAnd(uint a, long b)
		{
			return (uint) (a & (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a uint with a short</returns>
		public static uint BitwiseAnd(uint a, short b)
		{
			return (uint) (a & (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a uint with a ushort</returns>
		public static uint BitwiseAnd(uint a, ushort b)
		{
			return (uint) (a & (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a uint with a char</returns>
		public static uint BitwiseAnd(uint a, char b)
		{
			return (uint) (a & (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a uint with a byte</returns>
		public static uint BitwiseAnd(uint a, byte b)
		{
			return (uint) (a & (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a uint with a sbyte</returns>
		public static uint BitwiseAnd(uint a, sbyte b)
		{
			return (uint) (a & (uint)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a ushort with a int</returns>
		public static ushort BitwiseAnd(ushort a, int b)
		{
			return (ushort) (a & (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a ushort with a long</returns>
		public static ushort BitwiseAnd(ushort a, long b)
		{
			return (ushort) (a & (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a ushort with a short</returns>
		public static ushort BitwiseAnd(ushort a, short b)
		{
			return (ushort) (a & (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a ushort with a uint</returns>
		public static ushort BitwiseAnd(ushort a, uint b)
		{
			return (ushort) (a & (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a ushort with a char</returns>
		public static ushort BitwiseAnd(ushort a, char b)
		{
			return (ushort) (a & (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a ushort with a byte</returns>
		public static ushort BitwiseAnd(ushort a, byte b)
		{
			return (ushort) (a & (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a ushort with a sbyte</returns>
		public static ushort BitwiseAnd(ushort a, sbyte b)
		{
			return (ushort) (a & (ushort)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a char with a int</returns>
		public static char BitwiseAnd(char a, int b)
		{
			return (char) (a & (char)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a char with a long</returns>
		public static char BitwiseAnd(char a, long b)
		{
			return (char) (a & (char)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a char with a short</returns>
		public static char BitwiseAnd(char a, short b)
		{
			return (char) (a & (char)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a char with a uint</returns>
		public static char BitwiseAnd(char a, uint b)
		{
			return (char) (a & (char)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a char with a ushort</returns>
		public static char BitwiseAnd(char a, ushort b)
		{
			return (char) (a & (char)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a char with a byte</returns>
		public static char BitwiseAnd(char a, byte b)
		{
			return (char) (a & (char)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a char with a sbyte</returns>
		public static char BitwiseAnd(char a, sbyte b)
		{
			return (char) (a & (char)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a byte with a int</returns>
		public static byte BitwiseAnd(byte a, int b)
		{
			return (byte) (a & (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a byte with a long</returns>
		public static byte BitwiseAnd(byte a, long b)
		{
			return (byte) (a & (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a byte with a short</returns>
		public static byte BitwiseAnd(byte a, short b)
		{
			return (byte) (a & (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a byte with a uint</returns>
		public static byte BitwiseAnd(byte a, uint b)
		{
			return (byte) (a & (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a byte with a ushort</returns>
		public static byte BitwiseAnd(byte a, ushort b)
		{
			return (byte) (a & (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a byte with a char</returns>
		public static byte BitwiseAnd(byte a, char b)
		{
			return (byte) (a & (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a byte with a sbyte</returns>
		public static byte BitwiseAnd(byte a, sbyte b)
		{
			return (byte) (a & (byte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a sbyte with a int</returns>
		public static sbyte BitwiseAnd(sbyte a, int b)
		{
			return (sbyte) (a & (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a sbyte with a long</returns>
		public static sbyte BitwiseAnd(sbyte a, long b)
		{
			return (sbyte) (a & (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a sbyte with a short</returns>
		public static sbyte BitwiseAnd(sbyte a, short b)
		{
			return (sbyte) (a & (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a sbyte with a uint</returns>
		public static sbyte BitwiseAnd(sbyte a, uint b)
		{
			return (sbyte) (a & (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a sbyte with a ushort</returns>
		public static sbyte BitwiseAnd(sbyte a, ushort b)
		{
			return (sbyte) (a & (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a sbyte with a char</returns>
		public static sbyte BitwiseAnd(sbyte a, char b)
		{
			return (sbyte) (a & (sbyte)b);
		}

		/// <summary>
        /// Perform an BitwiseAnd
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the BitwiseAnd of a sbyte with a byte</returns>
		public static sbyte BitwiseAnd(sbyte a, byte b)
		{
			return (sbyte) (a & (sbyte)b);
		}


        #endregion

        #region LogicalOr Mixable


        #endregion

        #region LogicalAnd Mixable


        #endregion

        #region LessThan Mixable

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a long</returns>
		public static bool LessThan(int a, long b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a short</returns>
		public static bool LessThan(int a, short b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a uint</returns>
		public static bool LessThan(int a, uint b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a ushort</returns>
		public static bool LessThan(int a, ushort b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a float</returns>
		public static bool LessThan(int a, float b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a double</returns>
		public static bool LessThan(int a, double b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a decimal</returns>
		public static bool LessThan(int a, decimal b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a char</returns>
		public static bool LessThan(int a, char b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a byte</returns>
		public static bool LessThan(int a, byte b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a int with a sbyte</returns>
		public static bool LessThan(int a, sbyte b)
		{
			return (bool) (a < (int)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a int</returns>
		public static bool LessThan(long a, int b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a short</returns>
		public static bool LessThan(long a, short b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a uint</returns>
		public static bool LessThan(long a, uint b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a ushort</returns>
		public static bool LessThan(long a, ushort b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a float</returns>
		public static bool LessThan(long a, float b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a double</returns>
		public static bool LessThan(long a, double b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a decimal</returns>
		public static bool LessThan(long a, decimal b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a char</returns>
		public static bool LessThan(long a, char b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a byte</returns>
		public static bool LessThan(long a, byte b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a long with a sbyte</returns>
		public static bool LessThan(long a, sbyte b)
		{
			return (bool) (a < (long)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a int</returns>
		public static bool LessThan(short a, int b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a long</returns>
		public static bool LessThan(short a, long b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a uint</returns>
		public static bool LessThan(short a, uint b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a ushort</returns>
		public static bool LessThan(short a, ushort b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a float</returns>
		public static bool LessThan(short a, float b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a double</returns>
		public static bool LessThan(short a, double b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a decimal</returns>
		public static bool LessThan(short a, decimal b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a char</returns>
		public static bool LessThan(short a, char b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a byte</returns>
		public static bool LessThan(short a, byte b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a short with a sbyte</returns>
		public static bool LessThan(short a, sbyte b)
		{
			return (bool) (a < (short)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a int</returns>
		public static bool LessThan(uint a, int b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a long</returns>
		public static bool LessThan(uint a, long b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a short</returns>
		public static bool LessThan(uint a, short b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a ushort</returns>
		public static bool LessThan(uint a, ushort b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a float</returns>
		public static bool LessThan(uint a, float b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a double</returns>
		public static bool LessThan(uint a, double b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a decimal</returns>
		public static bool LessThan(uint a, decimal b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a char</returns>
		public static bool LessThan(uint a, char b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a byte</returns>
		public static bool LessThan(uint a, byte b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a uint with a sbyte</returns>
		public static bool LessThan(uint a, sbyte b)
		{
			return (bool) (a < (uint)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a int</returns>
		public static bool LessThan(ushort a, int b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a long</returns>
		public static bool LessThan(ushort a, long b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a short</returns>
		public static bool LessThan(ushort a, short b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a uint</returns>
		public static bool LessThan(ushort a, uint b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a float</returns>
		public static bool LessThan(ushort a, float b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a double</returns>
		public static bool LessThan(ushort a, double b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a decimal</returns>
		public static bool LessThan(ushort a, decimal b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a char</returns>
		public static bool LessThan(ushort a, char b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a byte</returns>
		public static bool LessThan(ushort a, byte b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a ushort with a sbyte</returns>
		public static bool LessThan(ushort a, sbyte b)
		{
			return (bool) (a < (ushort)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a int</returns>
		public static bool LessThan(float a, int b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a long</returns>
		public static bool LessThan(float a, long b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a short</returns>
		public static bool LessThan(float a, short b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a uint</returns>
		public static bool LessThan(float a, uint b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a ushort</returns>
		public static bool LessThan(float a, ushort b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a double</returns>
		public static bool LessThan(float a, double b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a decimal</returns>
		public static bool LessThan(float a, decimal b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a char</returns>
		public static bool LessThan(float a, char b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a byte</returns>
		public static bool LessThan(float a, byte b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a float with a sbyte</returns>
		public static bool LessThan(float a, sbyte b)
		{
			return (bool) (a < (float)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a int</returns>
		public static bool LessThan(double a, int b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a long</returns>
		public static bool LessThan(double a, long b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a short</returns>
		public static bool LessThan(double a, short b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a uint</returns>
		public static bool LessThan(double a, uint b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a ushort</returns>
		public static bool LessThan(double a, ushort b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a float</returns>
		public static bool LessThan(double a, float b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a decimal</returns>
		public static bool LessThan(double a, decimal b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a char</returns>
		public static bool LessThan(double a, char b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a byte</returns>
		public static bool LessThan(double a, byte b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a double with a sbyte</returns>
		public static bool LessThan(double a, sbyte b)
		{
			return (bool) (a < (double)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a int</returns>
		public static bool LessThan(decimal a, int b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a long</returns>
		public static bool LessThan(decimal a, long b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a short</returns>
		public static bool LessThan(decimal a, short b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a uint</returns>
		public static bool LessThan(decimal a, uint b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a ushort</returns>
		public static bool LessThan(decimal a, ushort b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a float</returns>
		public static bool LessThan(decimal a, float b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a double</returns>
		public static bool LessThan(decimal a, double b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a char</returns>
		public static bool LessThan(decimal a, char b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a byte</returns>
		public static bool LessThan(decimal a, byte b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a decimal with a sbyte</returns>
		public static bool LessThan(decimal a, sbyte b)
		{
			return (bool) (a < (decimal)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a int</returns>
		public static bool LessThan(char a, int b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a long</returns>
		public static bool LessThan(char a, long b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a short</returns>
		public static bool LessThan(char a, short b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a uint</returns>
		public static bool LessThan(char a, uint b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a ushort</returns>
		public static bool LessThan(char a, ushort b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a float</returns>
		public static bool LessThan(char a, float b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a double</returns>
		public static bool LessThan(char a, double b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a decimal</returns>
		public static bool LessThan(char a, decimal b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a byte</returns>
		public static bool LessThan(char a, byte b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a char with a sbyte</returns>
		public static bool LessThan(char a, sbyte b)
		{
			return (bool) (a < (char)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a int</returns>
		public static bool LessThan(byte a, int b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a long</returns>
		public static bool LessThan(byte a, long b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a short</returns>
		public static bool LessThan(byte a, short b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a uint</returns>
		public static bool LessThan(byte a, uint b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a ushort</returns>
		public static bool LessThan(byte a, ushort b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a float</returns>
		public static bool LessThan(byte a, float b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a double</returns>
		public static bool LessThan(byte a, double b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a decimal</returns>
		public static bool LessThan(byte a, decimal b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a char</returns>
		public static bool LessThan(byte a, char b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a byte with a sbyte</returns>
		public static bool LessThan(byte a, sbyte b)
		{
			return (bool) (a < (byte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a int</returns>
		public static bool LessThan(sbyte a, int b)
		{
			return (bool) (a < (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a long</returns>
		public static bool LessThan(sbyte a, long b)
		{
			return (bool) (a < (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a short</returns>
		public static bool LessThan(sbyte a, short b)
		{
			return (bool) (a < (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a uint</returns>
		public static bool LessThan(sbyte a, uint b)
		{
			return (bool) (a < (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a ushort</returns>
		public static bool LessThan(sbyte a, ushort b)
		{
			return (bool) (a < (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a float</returns>
		public static bool LessThan(sbyte a, float b)
		{
			return (bool) (a < (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a double</returns>
		public static bool LessThan(sbyte a, double b)
		{
			return (bool) (a < (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a decimal</returns>
		public static bool LessThan(sbyte a, decimal b)
		{
			return (bool) (a < (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a char</returns>
		public static bool LessThan(sbyte a, char b)
		{
			return (bool) (a < (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThan of a sbyte with a byte</returns>
		public static bool LessThan(sbyte a, byte b)
		{
			return (bool) (a < (sbyte)b);
		}


        #endregion

        #region LessThanOrEqual Mixable

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a long</returns>
		public static bool LessThanOrEqual(int a, long b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a short</returns>
		public static bool LessThanOrEqual(int a, short b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a uint</returns>
		public static bool LessThanOrEqual(int a, uint b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a ushort</returns>
		public static bool LessThanOrEqual(int a, ushort b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a float</returns>
		public static bool LessThanOrEqual(int a, float b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a double</returns>
		public static bool LessThanOrEqual(int a, double b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a decimal</returns>
		public static bool LessThanOrEqual(int a, decimal b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a char</returns>
		public static bool LessThanOrEqual(int a, char b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a byte</returns>
		public static bool LessThanOrEqual(int a, byte b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a int with a sbyte</returns>
		public static bool LessThanOrEqual(int a, sbyte b)
		{
			return (bool) (a <= (int)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a int</returns>
		public static bool LessThanOrEqual(long a, int b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a short</returns>
		public static bool LessThanOrEqual(long a, short b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a uint</returns>
		public static bool LessThanOrEqual(long a, uint b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a ushort</returns>
		public static bool LessThanOrEqual(long a, ushort b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a float</returns>
		public static bool LessThanOrEqual(long a, float b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a double</returns>
		public static bool LessThanOrEqual(long a, double b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a decimal</returns>
		public static bool LessThanOrEqual(long a, decimal b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a char</returns>
		public static bool LessThanOrEqual(long a, char b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a byte</returns>
		public static bool LessThanOrEqual(long a, byte b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a long with a sbyte</returns>
		public static bool LessThanOrEqual(long a, sbyte b)
		{
			return (bool) (a <= (long)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a int</returns>
		public static bool LessThanOrEqual(short a, int b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a long</returns>
		public static bool LessThanOrEqual(short a, long b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a uint</returns>
		public static bool LessThanOrEqual(short a, uint b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a ushort</returns>
		public static bool LessThanOrEqual(short a, ushort b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a float</returns>
		public static bool LessThanOrEqual(short a, float b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a double</returns>
		public static bool LessThanOrEqual(short a, double b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a decimal</returns>
		public static bool LessThanOrEqual(short a, decimal b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a char</returns>
		public static bool LessThanOrEqual(short a, char b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a byte</returns>
		public static bool LessThanOrEqual(short a, byte b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a short with a sbyte</returns>
		public static bool LessThanOrEqual(short a, sbyte b)
		{
			return (bool) (a <= (short)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a int</returns>
		public static bool LessThanOrEqual(uint a, int b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a long</returns>
		public static bool LessThanOrEqual(uint a, long b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a short</returns>
		public static bool LessThanOrEqual(uint a, short b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a ushort</returns>
		public static bool LessThanOrEqual(uint a, ushort b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a float</returns>
		public static bool LessThanOrEqual(uint a, float b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a double</returns>
		public static bool LessThanOrEqual(uint a, double b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a decimal</returns>
		public static bool LessThanOrEqual(uint a, decimal b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a char</returns>
		public static bool LessThanOrEqual(uint a, char b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a byte</returns>
		public static bool LessThanOrEqual(uint a, byte b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a uint with a sbyte</returns>
		public static bool LessThanOrEqual(uint a, sbyte b)
		{
			return (bool) (a <= (uint)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a int</returns>
		public static bool LessThanOrEqual(ushort a, int b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a long</returns>
		public static bool LessThanOrEqual(ushort a, long b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a short</returns>
		public static bool LessThanOrEqual(ushort a, short b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a uint</returns>
		public static bool LessThanOrEqual(ushort a, uint b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a float</returns>
		public static bool LessThanOrEqual(ushort a, float b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a double</returns>
		public static bool LessThanOrEqual(ushort a, double b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a decimal</returns>
		public static bool LessThanOrEqual(ushort a, decimal b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a char</returns>
		public static bool LessThanOrEqual(ushort a, char b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a byte</returns>
		public static bool LessThanOrEqual(ushort a, byte b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a ushort with a sbyte</returns>
		public static bool LessThanOrEqual(ushort a, sbyte b)
		{
			return (bool) (a <= (ushort)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a int</returns>
		public static bool LessThanOrEqual(float a, int b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a long</returns>
		public static bool LessThanOrEqual(float a, long b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a short</returns>
		public static bool LessThanOrEqual(float a, short b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a uint</returns>
		public static bool LessThanOrEqual(float a, uint b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a ushort</returns>
		public static bool LessThanOrEqual(float a, ushort b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a double</returns>
		public static bool LessThanOrEqual(float a, double b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a decimal</returns>
		public static bool LessThanOrEqual(float a, decimal b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a char</returns>
		public static bool LessThanOrEqual(float a, char b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a byte</returns>
		public static bool LessThanOrEqual(float a, byte b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a float with a sbyte</returns>
		public static bool LessThanOrEqual(float a, sbyte b)
		{
			return (bool) (a <= (float)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a int</returns>
		public static bool LessThanOrEqual(double a, int b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a long</returns>
		public static bool LessThanOrEqual(double a, long b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a short</returns>
		public static bool LessThanOrEqual(double a, short b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a uint</returns>
		public static bool LessThanOrEqual(double a, uint b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a ushort</returns>
		public static bool LessThanOrEqual(double a, ushort b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a float</returns>
		public static bool LessThanOrEqual(double a, float b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a decimal</returns>
		public static bool LessThanOrEqual(double a, decimal b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a char</returns>
		public static bool LessThanOrEqual(double a, char b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a byte</returns>
		public static bool LessThanOrEqual(double a, byte b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a double with a sbyte</returns>
		public static bool LessThanOrEqual(double a, sbyte b)
		{
			return (bool) (a <= (double)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a int</returns>
		public static bool LessThanOrEqual(decimal a, int b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a long</returns>
		public static bool LessThanOrEqual(decimal a, long b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a short</returns>
		public static bool LessThanOrEqual(decimal a, short b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a uint</returns>
		public static bool LessThanOrEqual(decimal a, uint b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a ushort</returns>
		public static bool LessThanOrEqual(decimal a, ushort b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a float</returns>
		public static bool LessThanOrEqual(decimal a, float b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a double</returns>
		public static bool LessThanOrEqual(decimal a, double b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a char</returns>
		public static bool LessThanOrEqual(decimal a, char b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a byte</returns>
		public static bool LessThanOrEqual(decimal a, byte b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a decimal with a sbyte</returns>
		public static bool LessThanOrEqual(decimal a, sbyte b)
		{
			return (bool) (a <= (decimal)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a int</returns>
		public static bool LessThanOrEqual(char a, int b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a long</returns>
		public static bool LessThanOrEqual(char a, long b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a short</returns>
		public static bool LessThanOrEqual(char a, short b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a uint</returns>
		public static bool LessThanOrEqual(char a, uint b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a ushort</returns>
		public static bool LessThanOrEqual(char a, ushort b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a float</returns>
		public static bool LessThanOrEqual(char a, float b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a double</returns>
		public static bool LessThanOrEqual(char a, double b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a decimal</returns>
		public static bool LessThanOrEqual(char a, decimal b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a byte</returns>
		public static bool LessThanOrEqual(char a, byte b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a char with a sbyte</returns>
		public static bool LessThanOrEqual(char a, sbyte b)
		{
			return (bool) (a <= (char)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a int</returns>
		public static bool LessThanOrEqual(byte a, int b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a long</returns>
		public static bool LessThanOrEqual(byte a, long b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a short</returns>
		public static bool LessThanOrEqual(byte a, short b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a uint</returns>
		public static bool LessThanOrEqual(byte a, uint b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a ushort</returns>
		public static bool LessThanOrEqual(byte a, ushort b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a float</returns>
		public static bool LessThanOrEqual(byte a, float b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a double</returns>
		public static bool LessThanOrEqual(byte a, double b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a decimal</returns>
		public static bool LessThanOrEqual(byte a, decimal b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a char</returns>
		public static bool LessThanOrEqual(byte a, char b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a byte with a sbyte</returns>
		public static bool LessThanOrEqual(byte a, sbyte b)
		{
			return (bool) (a <= (byte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a int</returns>
		public static bool LessThanOrEqual(sbyte a, int b)
		{
			return (bool) (a <= (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a long</returns>
		public static bool LessThanOrEqual(sbyte a, long b)
		{
			return (bool) (a <= (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a short</returns>
		public static bool LessThanOrEqual(sbyte a, short b)
		{
			return (bool) (a <= (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a uint</returns>
		public static bool LessThanOrEqual(sbyte a, uint b)
		{
			return (bool) (a <= (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a ushort</returns>
		public static bool LessThanOrEqual(sbyte a, ushort b)
		{
			return (bool) (a <= (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a float</returns>
		public static bool LessThanOrEqual(sbyte a, float b)
		{
			return (bool) (a <= (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a double</returns>
		public static bool LessThanOrEqual(sbyte a, double b)
		{
			return (bool) (a <= (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a decimal</returns>
		public static bool LessThanOrEqual(sbyte a, decimal b)
		{
			return (bool) (a <= (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a char</returns>
		public static bool LessThanOrEqual(sbyte a, char b)
		{
			return (bool) (a <= (sbyte)b);
		}

		/// <summary>
        /// Perform an LessThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the LessThanOrEqual of a sbyte with a byte</returns>
		public static bool LessThanOrEqual(sbyte a, byte b)
		{
			return (bool) (a <= (sbyte)b);
		}


        #endregion

        #region GreaterThan Mixable

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a long</returns>
		public static bool GreaterThan(int a, long b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a short</returns>
		public static bool GreaterThan(int a, short b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a uint</returns>
		public static bool GreaterThan(int a, uint b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a ushort</returns>
		public static bool GreaterThan(int a, ushort b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a float</returns>
		public static bool GreaterThan(int a, float b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a double</returns>
		public static bool GreaterThan(int a, double b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a decimal</returns>
		public static bool GreaterThan(int a, decimal b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a char</returns>
		public static bool GreaterThan(int a, char b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a byte</returns>
		public static bool GreaterThan(int a, byte b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a int with a sbyte</returns>
		public static bool GreaterThan(int a, sbyte b)
		{
			return (bool) (a > (int)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a int</returns>
		public static bool GreaterThan(long a, int b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a short</returns>
		public static bool GreaterThan(long a, short b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a uint</returns>
		public static bool GreaterThan(long a, uint b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a ushort</returns>
		public static bool GreaterThan(long a, ushort b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a float</returns>
		public static bool GreaterThan(long a, float b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a double</returns>
		public static bool GreaterThan(long a, double b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a decimal</returns>
		public static bool GreaterThan(long a, decimal b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a char</returns>
		public static bool GreaterThan(long a, char b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a byte</returns>
		public static bool GreaterThan(long a, byte b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a long with a sbyte</returns>
		public static bool GreaterThan(long a, sbyte b)
		{
			return (bool) (a > (long)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a int</returns>
		public static bool GreaterThan(short a, int b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a long</returns>
		public static bool GreaterThan(short a, long b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a uint</returns>
		public static bool GreaterThan(short a, uint b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a ushort</returns>
		public static bool GreaterThan(short a, ushort b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a float</returns>
		public static bool GreaterThan(short a, float b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a double</returns>
		public static bool GreaterThan(short a, double b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a decimal</returns>
		public static bool GreaterThan(short a, decimal b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a char</returns>
		public static bool GreaterThan(short a, char b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a byte</returns>
		public static bool GreaterThan(short a, byte b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a short with a sbyte</returns>
		public static bool GreaterThan(short a, sbyte b)
		{
			return (bool) (a > (short)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a int</returns>
		public static bool GreaterThan(uint a, int b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a long</returns>
		public static bool GreaterThan(uint a, long b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a short</returns>
		public static bool GreaterThan(uint a, short b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a ushort</returns>
		public static bool GreaterThan(uint a, ushort b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a float</returns>
		public static bool GreaterThan(uint a, float b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a double</returns>
		public static bool GreaterThan(uint a, double b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a decimal</returns>
		public static bool GreaterThan(uint a, decimal b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a char</returns>
		public static bool GreaterThan(uint a, char b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a byte</returns>
		public static bool GreaterThan(uint a, byte b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a uint with a sbyte</returns>
		public static bool GreaterThan(uint a, sbyte b)
		{
			return (bool) (a > (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a int</returns>
		public static bool GreaterThan(ushort a, int b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a long</returns>
		public static bool GreaterThan(ushort a, long b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a short</returns>
		public static bool GreaterThan(ushort a, short b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a uint</returns>
		public static bool GreaterThan(ushort a, uint b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a float</returns>
		public static bool GreaterThan(ushort a, float b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a double</returns>
		public static bool GreaterThan(ushort a, double b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a decimal</returns>
		public static bool GreaterThan(ushort a, decimal b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a char</returns>
		public static bool GreaterThan(ushort a, char b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a byte</returns>
		public static bool GreaterThan(ushort a, byte b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a ushort with a sbyte</returns>
		public static bool GreaterThan(ushort a, sbyte b)
		{
			return (bool) (a > (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a int</returns>
		public static bool GreaterThan(float a, int b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a long</returns>
		public static bool GreaterThan(float a, long b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a short</returns>
		public static bool GreaterThan(float a, short b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a uint</returns>
		public static bool GreaterThan(float a, uint b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a ushort</returns>
		public static bool GreaterThan(float a, ushort b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a double</returns>
		public static bool GreaterThan(float a, double b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a decimal</returns>
		public static bool GreaterThan(float a, decimal b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a char</returns>
		public static bool GreaterThan(float a, char b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a byte</returns>
		public static bool GreaterThan(float a, byte b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a float with a sbyte</returns>
		public static bool GreaterThan(float a, sbyte b)
		{
			return (bool) (a > (float)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a int</returns>
		public static bool GreaterThan(double a, int b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a long</returns>
		public static bool GreaterThan(double a, long b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a short</returns>
		public static bool GreaterThan(double a, short b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a uint</returns>
		public static bool GreaterThan(double a, uint b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a ushort</returns>
		public static bool GreaterThan(double a, ushort b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a float</returns>
		public static bool GreaterThan(double a, float b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a decimal</returns>
		public static bool GreaterThan(double a, decimal b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a char</returns>
		public static bool GreaterThan(double a, char b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a byte</returns>
		public static bool GreaterThan(double a, byte b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a double with a sbyte</returns>
		public static bool GreaterThan(double a, sbyte b)
		{
			return (bool) (a > (double)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a int</returns>
		public static bool GreaterThan(decimal a, int b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a long</returns>
		public static bool GreaterThan(decimal a, long b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a short</returns>
		public static bool GreaterThan(decimal a, short b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a uint</returns>
		public static bool GreaterThan(decimal a, uint b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a ushort</returns>
		public static bool GreaterThan(decimal a, ushort b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a float</returns>
		public static bool GreaterThan(decimal a, float b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a double</returns>
		public static bool GreaterThan(decimal a, double b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a char</returns>
		public static bool GreaterThan(decimal a, char b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a byte</returns>
		public static bool GreaterThan(decimal a, byte b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a decimal with a sbyte</returns>
		public static bool GreaterThan(decimal a, sbyte b)
		{
			return (bool) (a > (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a int</returns>
		public static bool GreaterThan(char a, int b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a long</returns>
		public static bool GreaterThan(char a, long b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a short</returns>
		public static bool GreaterThan(char a, short b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a uint</returns>
		public static bool GreaterThan(char a, uint b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a ushort</returns>
		public static bool GreaterThan(char a, ushort b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a float</returns>
		public static bool GreaterThan(char a, float b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a double</returns>
		public static bool GreaterThan(char a, double b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a decimal</returns>
		public static bool GreaterThan(char a, decimal b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a byte</returns>
		public static bool GreaterThan(char a, byte b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a char with a sbyte</returns>
		public static bool GreaterThan(char a, sbyte b)
		{
			return (bool) (a > (char)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a int</returns>
		public static bool GreaterThan(byte a, int b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a long</returns>
		public static bool GreaterThan(byte a, long b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a short</returns>
		public static bool GreaterThan(byte a, short b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a uint</returns>
		public static bool GreaterThan(byte a, uint b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a ushort</returns>
		public static bool GreaterThan(byte a, ushort b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a float</returns>
		public static bool GreaterThan(byte a, float b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a double</returns>
		public static bool GreaterThan(byte a, double b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a decimal</returns>
		public static bool GreaterThan(byte a, decimal b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a char</returns>
		public static bool GreaterThan(byte a, char b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a byte with a sbyte</returns>
		public static bool GreaterThan(byte a, sbyte b)
		{
			return (bool) (a > (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a int</returns>
		public static bool GreaterThan(sbyte a, int b)
		{
			return (bool) (a > (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a long</returns>
		public static bool GreaterThan(sbyte a, long b)
		{
			return (bool) (a > (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a short</returns>
		public static bool GreaterThan(sbyte a, short b)
		{
			return (bool) (a > (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a uint</returns>
		public static bool GreaterThan(sbyte a, uint b)
		{
			return (bool) (a > (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a ushort</returns>
		public static bool GreaterThan(sbyte a, ushort b)
		{
			return (bool) (a > (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a float</returns>
		public static bool GreaterThan(sbyte a, float b)
		{
			return (bool) (a > (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a double</returns>
		public static bool GreaterThan(sbyte a, double b)
		{
			return (bool) (a > (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a decimal</returns>
		public static bool GreaterThan(sbyte a, decimal b)
		{
			return (bool) (a > (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a char</returns>
		public static bool GreaterThan(sbyte a, char b)
		{
			return (bool) (a > (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThan
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThan of a sbyte with a byte</returns>
		public static bool GreaterThan(sbyte a, byte b)
		{
			return (bool) (a > (sbyte)b);
		}


        #endregion

        #region GreaterThanOrEqual Mixable

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a long</returns>
		public static bool GreaterThanOrEqual(int a, long b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a short</returns>
		public static bool GreaterThanOrEqual(int a, short b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a uint</returns>
		public static bool GreaterThanOrEqual(int a, uint b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a ushort</returns>
		public static bool GreaterThanOrEqual(int a, ushort b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a float</returns>
		public static bool GreaterThanOrEqual(int a, float b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a double</returns>
		public static bool GreaterThanOrEqual(int a, double b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a decimal</returns>
		public static bool GreaterThanOrEqual(int a, decimal b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a char</returns>
		public static bool GreaterThanOrEqual(int a, char b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a byte</returns>
		public static bool GreaterThanOrEqual(int a, byte b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a int with a sbyte</returns>
		public static bool GreaterThanOrEqual(int a, sbyte b)
		{
			return (bool) (a >= (int)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a int</returns>
		public static bool GreaterThanOrEqual(long a, int b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a short</returns>
		public static bool GreaterThanOrEqual(long a, short b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a uint</returns>
		public static bool GreaterThanOrEqual(long a, uint b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a ushort</returns>
		public static bool GreaterThanOrEqual(long a, ushort b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a float</returns>
		public static bool GreaterThanOrEqual(long a, float b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a double</returns>
		public static bool GreaterThanOrEqual(long a, double b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a decimal</returns>
		public static bool GreaterThanOrEqual(long a, decimal b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a char</returns>
		public static bool GreaterThanOrEqual(long a, char b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a byte</returns>
		public static bool GreaterThanOrEqual(long a, byte b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a long with a sbyte</returns>
		public static bool GreaterThanOrEqual(long a, sbyte b)
		{
			return (bool) (a >= (long)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a int</returns>
		public static bool GreaterThanOrEqual(short a, int b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a long</returns>
		public static bool GreaterThanOrEqual(short a, long b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a uint</returns>
		public static bool GreaterThanOrEqual(short a, uint b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a ushort</returns>
		public static bool GreaterThanOrEqual(short a, ushort b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a float</returns>
		public static bool GreaterThanOrEqual(short a, float b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a double</returns>
		public static bool GreaterThanOrEqual(short a, double b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a decimal</returns>
		public static bool GreaterThanOrEqual(short a, decimal b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a char</returns>
		public static bool GreaterThanOrEqual(short a, char b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a byte</returns>
		public static bool GreaterThanOrEqual(short a, byte b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a short with a sbyte</returns>
		public static bool GreaterThanOrEqual(short a, sbyte b)
		{
			return (bool) (a >= (short)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a int</returns>
		public static bool GreaterThanOrEqual(uint a, int b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a long</returns>
		public static bool GreaterThanOrEqual(uint a, long b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a short</returns>
		public static bool GreaterThanOrEqual(uint a, short b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a ushort</returns>
		public static bool GreaterThanOrEqual(uint a, ushort b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a float</returns>
		public static bool GreaterThanOrEqual(uint a, float b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a double</returns>
		public static bool GreaterThanOrEqual(uint a, double b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a decimal</returns>
		public static bool GreaterThanOrEqual(uint a, decimal b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a char</returns>
		public static bool GreaterThanOrEqual(uint a, char b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a byte</returns>
		public static bool GreaterThanOrEqual(uint a, byte b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a uint with a sbyte</returns>
		public static bool GreaterThanOrEqual(uint a, sbyte b)
		{
			return (bool) (a >= (uint)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a int</returns>
		public static bool GreaterThanOrEqual(ushort a, int b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a long</returns>
		public static bool GreaterThanOrEqual(ushort a, long b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a short</returns>
		public static bool GreaterThanOrEqual(ushort a, short b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a uint</returns>
		public static bool GreaterThanOrEqual(ushort a, uint b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a float</returns>
		public static bool GreaterThanOrEqual(ushort a, float b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a double</returns>
		public static bool GreaterThanOrEqual(ushort a, double b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a decimal</returns>
		public static bool GreaterThanOrEqual(ushort a, decimal b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a char</returns>
		public static bool GreaterThanOrEqual(ushort a, char b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a byte</returns>
		public static bool GreaterThanOrEqual(ushort a, byte b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a ushort with a sbyte</returns>
		public static bool GreaterThanOrEqual(ushort a, sbyte b)
		{
			return (bool) (a >= (ushort)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a int</returns>
		public static bool GreaterThanOrEqual(float a, int b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a long</returns>
		public static bool GreaterThanOrEqual(float a, long b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a short</returns>
		public static bool GreaterThanOrEqual(float a, short b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a uint</returns>
		public static bool GreaterThanOrEqual(float a, uint b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a ushort</returns>
		public static bool GreaterThanOrEqual(float a, ushort b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a double</returns>
		public static bool GreaterThanOrEqual(float a, double b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a decimal</returns>
		public static bool GreaterThanOrEqual(float a, decimal b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a char</returns>
		public static bool GreaterThanOrEqual(float a, char b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a byte</returns>
		public static bool GreaterThanOrEqual(float a, byte b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a float with a sbyte</returns>
		public static bool GreaterThanOrEqual(float a, sbyte b)
		{
			return (bool) (a >= (float)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a int</returns>
		public static bool GreaterThanOrEqual(double a, int b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a long</returns>
		public static bool GreaterThanOrEqual(double a, long b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a short</returns>
		public static bool GreaterThanOrEqual(double a, short b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a uint</returns>
		public static bool GreaterThanOrEqual(double a, uint b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a ushort</returns>
		public static bool GreaterThanOrEqual(double a, ushort b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a float</returns>
		public static bool GreaterThanOrEqual(double a, float b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a decimal</returns>
		public static bool GreaterThanOrEqual(double a, decimal b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a char</returns>
		public static bool GreaterThanOrEqual(double a, char b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a byte</returns>
		public static bool GreaterThanOrEqual(double a, byte b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a double with a sbyte</returns>
		public static bool GreaterThanOrEqual(double a, sbyte b)
		{
			return (bool) (a >= (double)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a int</returns>
		public static bool GreaterThanOrEqual(decimal a, int b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a long</returns>
		public static bool GreaterThanOrEqual(decimal a, long b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a short</returns>
		public static bool GreaterThanOrEqual(decimal a, short b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a uint</returns>
		public static bool GreaterThanOrEqual(decimal a, uint b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a ushort</returns>
		public static bool GreaterThanOrEqual(decimal a, ushort b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a float</returns>
		public static bool GreaterThanOrEqual(decimal a, float b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a double</returns>
		public static bool GreaterThanOrEqual(decimal a, double b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a char</returns>
		public static bool GreaterThanOrEqual(decimal a, char b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a byte</returns>
		public static bool GreaterThanOrEqual(decimal a, byte b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a decimal with a sbyte</returns>
		public static bool GreaterThanOrEqual(decimal a, sbyte b)
		{
			return (bool) (a >= (decimal)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a int</returns>
		public static bool GreaterThanOrEqual(char a, int b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a long</returns>
		public static bool GreaterThanOrEqual(char a, long b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a short</returns>
		public static bool GreaterThanOrEqual(char a, short b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a uint</returns>
		public static bool GreaterThanOrEqual(char a, uint b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a ushort</returns>
		public static bool GreaterThanOrEqual(char a, ushort b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a float</returns>
		public static bool GreaterThanOrEqual(char a, float b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a double</returns>
		public static bool GreaterThanOrEqual(char a, double b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a decimal</returns>
		public static bool GreaterThanOrEqual(char a, decimal b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a byte</returns>
		public static bool GreaterThanOrEqual(char a, byte b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a char with a sbyte</returns>
		public static bool GreaterThanOrEqual(char a, sbyte b)
		{
			return (bool) (a >= (char)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a int</returns>
		public static bool GreaterThanOrEqual(byte a, int b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a long</returns>
		public static bool GreaterThanOrEqual(byte a, long b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a short</returns>
		public static bool GreaterThanOrEqual(byte a, short b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a uint</returns>
		public static bool GreaterThanOrEqual(byte a, uint b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a ushort</returns>
		public static bool GreaterThanOrEqual(byte a, ushort b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a float</returns>
		public static bool GreaterThanOrEqual(byte a, float b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a double</returns>
		public static bool GreaterThanOrEqual(byte a, double b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a decimal</returns>
		public static bool GreaterThanOrEqual(byte a, decimal b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a char</returns>
		public static bool GreaterThanOrEqual(byte a, char b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a byte with a sbyte</returns>
		public static bool GreaterThanOrEqual(byte a, sbyte b)
		{
			return (bool) (a >= (byte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a int</returns>
		public static bool GreaterThanOrEqual(sbyte a, int b)
		{
			return (bool) (a >= (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a long</returns>
		public static bool GreaterThanOrEqual(sbyte a, long b)
		{
			return (bool) (a >= (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a short</returns>
		public static bool GreaterThanOrEqual(sbyte a, short b)
		{
			return (bool) (a >= (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a uint</returns>
		public static bool GreaterThanOrEqual(sbyte a, uint b)
		{
			return (bool) (a >= (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a ushort</returns>
		public static bool GreaterThanOrEqual(sbyte a, ushort b)
		{
			return (bool) (a >= (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a float</returns>
		public static bool GreaterThanOrEqual(sbyte a, float b)
		{
			return (bool) (a >= (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a double</returns>
		public static bool GreaterThanOrEqual(sbyte a, double b)
		{
			return (bool) (a >= (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a decimal</returns>
		public static bool GreaterThanOrEqual(sbyte a, decimal b)
		{
			return (bool) (a >= (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a char</returns>
		public static bool GreaterThanOrEqual(sbyte a, char b)
		{
			return (bool) (a >= (sbyte)b);
		}

		/// <summary>
        /// Perform an GreaterThanOrEqual
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the GreaterThanOrEqual of a sbyte with a byte</returns>
		public static bool GreaterThanOrEqual(sbyte a, byte b)
		{
			return (bool) (a >= (sbyte)b);
		}


        #endregion

        #region Equality Mixable

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a long</returns>
		public static bool Equality(int a, long b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a short</returns>
		public static bool Equality(int a, short b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a uint</returns>
		public static bool Equality(int a, uint b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a ushort</returns>
		public static bool Equality(int a, ushort b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a float</returns>
		public static bool Equality(int a, float b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a double</returns>
		public static bool Equality(int a, double b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a decimal</returns>
		public static bool Equality(int a, decimal b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a char</returns>
		public static bool Equality(int a, char b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a byte</returns>
		public static bool Equality(int a, byte b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a int with a sbyte</returns>
		public static bool Equality(int a, sbyte b)
		{
			return (bool) (a == (int)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a int</returns>
		public static bool Equality(long a, int b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a short</returns>
		public static bool Equality(long a, short b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a uint</returns>
		public static bool Equality(long a, uint b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a ushort</returns>
		public static bool Equality(long a, ushort b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a float</returns>
		public static bool Equality(long a, float b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a double</returns>
		public static bool Equality(long a, double b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a decimal</returns>
		public static bool Equality(long a, decimal b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a char</returns>
		public static bool Equality(long a, char b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a byte</returns>
		public static bool Equality(long a, byte b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a long with a sbyte</returns>
		public static bool Equality(long a, sbyte b)
		{
			return (bool) (a == (long)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a int</returns>
		public static bool Equality(short a, int b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a long</returns>
		public static bool Equality(short a, long b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a uint</returns>
		public static bool Equality(short a, uint b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a ushort</returns>
		public static bool Equality(short a, ushort b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a float</returns>
		public static bool Equality(short a, float b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a double</returns>
		public static bool Equality(short a, double b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a decimal</returns>
		public static bool Equality(short a, decimal b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a char</returns>
		public static bool Equality(short a, char b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a byte</returns>
		public static bool Equality(short a, byte b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a short with a sbyte</returns>
		public static bool Equality(short a, sbyte b)
		{
			return (bool) (a == (short)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a int</returns>
		public static bool Equality(uint a, int b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a long</returns>
		public static bool Equality(uint a, long b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a short</returns>
		public static bool Equality(uint a, short b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a ushort</returns>
		public static bool Equality(uint a, ushort b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a float</returns>
		public static bool Equality(uint a, float b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a double</returns>
		public static bool Equality(uint a, double b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a decimal</returns>
		public static bool Equality(uint a, decimal b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a char</returns>
		public static bool Equality(uint a, char b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a byte</returns>
		public static bool Equality(uint a, byte b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a uint with a sbyte</returns>
		public static bool Equality(uint a, sbyte b)
		{
			return (bool) (a == (uint)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a int</returns>
		public static bool Equality(ushort a, int b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a long</returns>
		public static bool Equality(ushort a, long b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a short</returns>
		public static bool Equality(ushort a, short b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a uint</returns>
		public static bool Equality(ushort a, uint b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a float</returns>
		public static bool Equality(ushort a, float b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a double</returns>
		public static bool Equality(ushort a, double b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a decimal</returns>
		public static bool Equality(ushort a, decimal b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a char</returns>
		public static bool Equality(ushort a, char b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a byte</returns>
		public static bool Equality(ushort a, byte b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a ushort with a sbyte</returns>
		public static bool Equality(ushort a, sbyte b)
		{
			return (bool) (a == (ushort)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a int</returns>
		public static bool Equality(float a, int b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a long</returns>
		public static bool Equality(float a, long b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a short</returns>
		public static bool Equality(float a, short b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a uint</returns>
		public static bool Equality(float a, uint b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a ushort</returns>
		public static bool Equality(float a, ushort b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a double</returns>
		public static bool Equality(float a, double b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a decimal</returns>
		public static bool Equality(float a, decimal b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a char</returns>
		public static bool Equality(float a, char b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a byte</returns>
		public static bool Equality(float a, byte b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a float with a sbyte</returns>
		public static bool Equality(float a, sbyte b)
		{
			return (bool) (a == (float)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a int</returns>
		public static bool Equality(double a, int b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a long</returns>
		public static bool Equality(double a, long b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a short</returns>
		public static bool Equality(double a, short b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a uint</returns>
		public static bool Equality(double a, uint b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a ushort</returns>
		public static bool Equality(double a, ushort b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a float</returns>
		public static bool Equality(double a, float b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a decimal</returns>
		public static bool Equality(double a, decimal b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a char</returns>
		public static bool Equality(double a, char b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a byte</returns>
		public static bool Equality(double a, byte b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a double with a sbyte</returns>
		public static bool Equality(double a, sbyte b)
		{
			return (bool) (a == (double)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a int</returns>
		public static bool Equality(decimal a, int b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a long</returns>
		public static bool Equality(decimal a, long b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a short</returns>
		public static bool Equality(decimal a, short b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a uint</returns>
		public static bool Equality(decimal a, uint b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a ushort</returns>
		public static bool Equality(decimal a, ushort b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a float</returns>
		public static bool Equality(decimal a, float b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a double</returns>
		public static bool Equality(decimal a, double b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a char</returns>
		public static bool Equality(decimal a, char b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a byte</returns>
		public static bool Equality(decimal a, byte b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a decimal with a sbyte</returns>
		public static bool Equality(decimal a, sbyte b)
		{
			return (bool) (a == (decimal)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a int</returns>
		public static bool Equality(char a, int b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a long</returns>
		public static bool Equality(char a, long b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a short</returns>
		public static bool Equality(char a, short b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a uint</returns>
		public static bool Equality(char a, uint b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a ushort</returns>
		public static bool Equality(char a, ushort b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a float</returns>
		public static bool Equality(char a, float b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a double</returns>
		public static bool Equality(char a, double b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a decimal</returns>
		public static bool Equality(char a, decimal b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a byte</returns>
		public static bool Equality(char a, byte b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a char with a sbyte</returns>
		public static bool Equality(char a, sbyte b)
		{
			return (bool) (a == (char)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a int</returns>
		public static bool Equality(byte a, int b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a long</returns>
		public static bool Equality(byte a, long b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a short</returns>
		public static bool Equality(byte a, short b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a uint</returns>
		public static bool Equality(byte a, uint b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a ushort</returns>
		public static bool Equality(byte a, ushort b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a float</returns>
		public static bool Equality(byte a, float b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a double</returns>
		public static bool Equality(byte a, double b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a decimal</returns>
		public static bool Equality(byte a, decimal b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a char</returns>
		public static bool Equality(byte a, char b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a byte with a sbyte</returns>
		public static bool Equality(byte a, sbyte b)
		{
			return (bool) (a == (byte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a int</returns>
		public static bool Equality(sbyte a, int b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a long</returns>
		public static bool Equality(sbyte a, long b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a short</returns>
		public static bool Equality(sbyte a, short b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a uint</returns>
		public static bool Equality(sbyte a, uint b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a ushort</returns>
		public static bool Equality(sbyte a, ushort b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a float</returns>
		public static bool Equality(sbyte a, float b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a double</returns>
		public static bool Equality(sbyte a, double b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a decimal</returns>
		public static bool Equality(sbyte a, decimal b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a char</returns>
		public static bool Equality(sbyte a, char b)
		{
			return (bool) (a == (sbyte)b);
		}

		/// <summary>
        /// Perform an Equality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Equality of a sbyte with a byte</returns>
		public static bool Equality(sbyte a, byte b)
		{
			return (bool) (a == (sbyte)b);
		}


        #endregion

        #region Inequality Mixable

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a long</returns>
		public static bool Inequality(int a, long b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a short</returns>
		public static bool Inequality(int a, short b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a uint</returns>
		public static bool Inequality(int a, uint b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a ushort</returns>
		public static bool Inequality(int a, ushort b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a float</returns>
		public static bool Inequality(int a, float b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a double</returns>
		public static bool Inequality(int a, double b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a decimal</returns>
		public static bool Inequality(int a, decimal b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a char</returns>
		public static bool Inequality(int a, char b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a byte</returns>
		public static bool Inequality(int a, byte b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a int with a sbyte</returns>
		public static bool Inequality(int a, sbyte b)
		{
			return (bool) (a != (int)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a int</returns>
		public static bool Inequality(long a, int b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a short</returns>
		public static bool Inequality(long a, short b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a uint</returns>
		public static bool Inequality(long a, uint b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a ushort</returns>
		public static bool Inequality(long a, ushort b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a float</returns>
		public static bool Inequality(long a, float b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a double</returns>
		public static bool Inequality(long a, double b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a decimal</returns>
		public static bool Inequality(long a, decimal b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a char</returns>
		public static bool Inequality(long a, char b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a byte</returns>
		public static bool Inequality(long a, byte b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a long with a sbyte</returns>
		public static bool Inequality(long a, sbyte b)
		{
			return (bool) (a != (long)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a int</returns>
		public static bool Inequality(short a, int b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a long</returns>
		public static bool Inequality(short a, long b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a uint</returns>
		public static bool Inequality(short a, uint b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a ushort</returns>
		public static bool Inequality(short a, ushort b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a float</returns>
		public static bool Inequality(short a, float b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a double</returns>
		public static bool Inequality(short a, double b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a decimal</returns>
		public static bool Inequality(short a, decimal b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a char</returns>
		public static bool Inequality(short a, char b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a byte</returns>
		public static bool Inequality(short a, byte b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a short with a sbyte</returns>
		public static bool Inequality(short a, sbyte b)
		{
			return (bool) (a != (short)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a int</returns>
		public static bool Inequality(uint a, int b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a long</returns>
		public static bool Inequality(uint a, long b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a short</returns>
		public static bool Inequality(uint a, short b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a ushort</returns>
		public static bool Inequality(uint a, ushort b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a float</returns>
		public static bool Inequality(uint a, float b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a double</returns>
		public static bool Inequality(uint a, double b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a decimal</returns>
		public static bool Inequality(uint a, decimal b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a char</returns>
		public static bool Inequality(uint a, char b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a byte</returns>
		public static bool Inequality(uint a, byte b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a uint with a sbyte</returns>
		public static bool Inequality(uint a, sbyte b)
		{
			return (bool) (a != (uint)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a int</returns>
		public static bool Inequality(ushort a, int b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a long</returns>
		public static bool Inequality(ushort a, long b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a short</returns>
		public static bool Inequality(ushort a, short b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a uint</returns>
		public static bool Inequality(ushort a, uint b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a float</returns>
		public static bool Inequality(ushort a, float b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a double</returns>
		public static bool Inequality(ushort a, double b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a decimal</returns>
		public static bool Inequality(ushort a, decimal b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a char</returns>
		public static bool Inequality(ushort a, char b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a byte</returns>
		public static bool Inequality(ushort a, byte b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a ushort with a sbyte</returns>
		public static bool Inequality(ushort a, sbyte b)
		{
			return (bool) (a != (ushort)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a int</returns>
		public static bool Inequality(float a, int b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a long</returns>
		public static bool Inequality(float a, long b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a short</returns>
		public static bool Inequality(float a, short b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a uint</returns>
		public static bool Inequality(float a, uint b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a ushort</returns>
		public static bool Inequality(float a, ushort b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a double</returns>
		public static bool Inequality(float a, double b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a decimal</returns>
		public static bool Inequality(float a, decimal b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a char</returns>
		public static bool Inequality(float a, char b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a byte</returns>
		public static bool Inequality(float a, byte b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a float with a sbyte</returns>
		public static bool Inequality(float a, sbyte b)
		{
			return (bool) (a != (float)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a int</returns>
		public static bool Inequality(double a, int b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a long</returns>
		public static bool Inequality(double a, long b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a short</returns>
		public static bool Inequality(double a, short b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a uint</returns>
		public static bool Inequality(double a, uint b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a ushort</returns>
		public static bool Inequality(double a, ushort b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a float</returns>
		public static bool Inequality(double a, float b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a decimal</returns>
		public static bool Inequality(double a, decimal b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a char</returns>
		public static bool Inequality(double a, char b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a byte</returns>
		public static bool Inequality(double a, byte b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a double with a sbyte</returns>
		public static bool Inequality(double a, sbyte b)
		{
			return (bool) (a != (double)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a int</returns>
		public static bool Inequality(decimal a, int b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a long</returns>
		public static bool Inequality(decimal a, long b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a short</returns>
		public static bool Inequality(decimal a, short b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a uint</returns>
		public static bool Inequality(decimal a, uint b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a ushort</returns>
		public static bool Inequality(decimal a, ushort b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a float</returns>
		public static bool Inequality(decimal a, float b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a double</returns>
		public static bool Inequality(decimal a, double b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a char</returns>
		public static bool Inequality(decimal a, char b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a byte</returns>
		public static bool Inequality(decimal a, byte b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a decimal with a sbyte</returns>
		public static bool Inequality(decimal a, sbyte b)
		{
			return (bool) (a != (decimal)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a int</returns>
		public static bool Inequality(char a, int b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a long</returns>
		public static bool Inequality(char a, long b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a short</returns>
		public static bool Inequality(char a, short b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a uint</returns>
		public static bool Inequality(char a, uint b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a ushort</returns>
		public static bool Inequality(char a, ushort b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a float</returns>
		public static bool Inequality(char a, float b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a double</returns>
		public static bool Inequality(char a, double b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a decimal</returns>
		public static bool Inequality(char a, decimal b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a byte</returns>
		public static bool Inequality(char a, byte b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a char with a sbyte</returns>
		public static bool Inequality(char a, sbyte b)
		{
			return (bool) (a != (char)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a int</returns>
		public static bool Inequality(byte a, int b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a long</returns>
		public static bool Inequality(byte a, long b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a short</returns>
		public static bool Inequality(byte a, short b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a uint</returns>
		public static bool Inequality(byte a, uint b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a ushort</returns>
		public static bool Inequality(byte a, ushort b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a float</returns>
		public static bool Inequality(byte a, float b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a double</returns>
		public static bool Inequality(byte a, double b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a decimal</returns>
		public static bool Inequality(byte a, decimal b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a char</returns>
		public static bool Inequality(byte a, char b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a byte with a sbyte</returns>
		public static bool Inequality(byte a, sbyte b)
		{
			return (bool) (a != (byte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a int</returns>
		public static bool Inequality(sbyte a, int b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a long</returns>
		public static bool Inequality(sbyte a, long b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a short</returns>
		public static bool Inequality(sbyte a, short b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a uint</returns>
		public static bool Inequality(sbyte a, uint b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a ushort</returns>
		public static bool Inequality(sbyte a, ushort b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a float</returns>
		public static bool Inequality(sbyte a, float b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a double</returns>
		public static bool Inequality(sbyte a, double b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a decimal</returns>
		public static bool Inequality(sbyte a, decimal b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a char</returns>
		public static bool Inequality(sbyte a, char b)
		{
			return (bool) (a != (sbyte)b);
		}

		/// <summary>
        /// Perform an Inequality
        /// </summary>
        /// <param name="a">The left object</param>
        /// <param name="b">The right object</param>
        /// <returns>Returns the result of the Inequality of a sbyte with a byte</returns>
		public static bool Inequality(sbyte a, byte b)
		{
			return (bool) (a != (sbyte)b);
		}


        #endregion

        #endregion
    }
}
#pragma warning disable CS0675 // Bitwise-or operator used on a sign-extended operand
